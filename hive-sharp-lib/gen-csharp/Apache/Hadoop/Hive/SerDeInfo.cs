/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Hadoop.Hive
{

  [Serializable]
  public partial class SerDeInfo : TBase
  {
    private string _name;
    private string _serializationLib;
    private Dictionary<string, string> _parameters;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string SerializationLib
    {
      get
      {
        return _serializationLib;
      }
      set
      {
        __isset.serializationLib = true;
        this._serializationLib = value;
      }
    }

    public Dictionary<string, string> Parameters
    {
      get
      {
        return _parameters;
      }
      set
      {
        __isset.parameters = true;
        this._parameters = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool name;
      public bool serializationLib;
      public bool parameters;
    }

    public SerDeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              SerializationLib = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Parameters = new Dictionary<string, string>();
                TMap _map44 = iprot.ReadMapBegin();
                for( int _i45 = 0; _i45 < _map44.Count; ++_i45)
                {
                  string _key46;
                  string _val47;
                  _key46 = iprot.ReadString();
                  _val47 = iprot.ReadString();
                  Parameters[_key46] = _val47;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SerDeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (SerializationLib != null && __isset.serializationLib) {
        field.Name = "serializationLib";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SerializationLib);
        oprot.WriteFieldEnd();
      }
      if (Parameters != null && __isset.parameters) {
        field.Name = "parameters";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
          foreach (string _iter48 in Parameters.Keys)
          {
            oprot.WriteString(_iter48);
            oprot.WriteString(Parameters[_iter48]);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SerDeInfo(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",SerializationLib: ");
      sb.Append(SerializationLib);
      sb.Append(",Parameters: ");
      sb.Append(Parameters);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
