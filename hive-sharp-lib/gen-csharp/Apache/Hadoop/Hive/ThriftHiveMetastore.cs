/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Hadoop.Hive
{
  public class ThriftHiveMetastore {
    public interface Iface : Facebook.FB303.FacebookService.Iface {
      void create_database(Database database);
      Database get_database(string name);
      void drop_database(string name, bool deleteData);
      List<string> get_databases(string pattern);
      List<string> get_all_databases();
      void alter_database(string dbname, Database db);
      Type get_type(string name);
      bool create_type(Type type);
      bool drop_type(string type);
      Dictionary<string, Type> get_type_all(string name);
      List<FieldSchema> get_fields(string db_name, string table_name);
      List<FieldSchema> get_schema(string db_name, string table_name);
      void create_table(Table tbl);
      void drop_table(string dbname, string name, bool deleteData);
      List<string> get_tables(string db_name, string pattern);
      List<string> get_all_tables(string db_name);
      Table get_table(string dbname, string tbl_name);
      void alter_table(string dbname, string tbl_name, Table new_tbl);
      Partition add_partition(Partition new_part);
      Partition append_partition(string db_name, string tbl_name, List<string> part_vals);
      Partition append_partition_by_name(string db_name, string tbl_name, string part_name);
      bool drop_partition(string db_name, string tbl_name, List<string> part_vals, bool deleteData);
      bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData);
      Partition get_partition(string db_name, string tbl_name, List<string> part_vals);
      Partition get_partition_with_auth(string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names);
      Partition get_partition_by_name(string db_name, string tbl_name, string part_name);
      List<Partition> get_partitions(string db_name, string tbl_name, short max_parts);
      List<Partition> get_partitions_with_auth(string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names);
      List<string> get_partition_names(string db_name, string tbl_name, short max_parts);
      List<Partition> get_partitions_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts);
      List<Partition> get_partitions_ps_with_auth(string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names);
      List<string> get_partition_names_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts);
      List<Partition> get_partitions_by_filter(string db_name, string tbl_name, string filter, short max_parts);
      void alter_partition(string db_name, string tbl_name, Partition new_part);
      string get_config_value(string name, string defaultValue);
      List<string> partition_name_to_vals(string part_name);
      Dictionary<string, string> partition_name_to_spec(string part_name);
      Index add_index(Index new_index, Table index_table);
      void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx);
      bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData);
      Index get_index_by_name(string db_name, string tbl_name, string index_name);
      List<Index> get_indexes(string db_name, string tbl_name, short max_indexes);
      List<string> get_index_names(string db_name, string tbl_name, short max_indexes);
      bool create_role(Role role);
      bool drop_role(string role_name);
      List<string> get_role_names();
      bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option);
      bool revoke_role(string role_name, string principal_name, PrincipalType principal_type);
      List<Role> list_roles(string principal_name, PrincipalType principal_type);
      PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name, List<string> group_names);
      List<HiveObjectPrivilege> list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject);
      bool grant_privileges(PrivilegeBag privileges);
      bool revoke_privileges(PrivilegeBag privileges);
      string get_delegation_token(string renewer_kerberos_principal_name);
      string get_delegation_token_with_signature(string renewer_kerberos_principal_name, string token_signature);
      long renew_delegation_token(string token_str_form);
      void cancel_delegation_token(string token_str_form);
    }

    public class Client : Facebook.FB303.FacebookService.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      public void create_database(Database database)
      {
        send_create_database(database);
        recv_create_database();
      }

      public void send_create_database(Database database)
      {
        oprot_.WriteMessageBegin(new TMessage("create_database", TMessageType.Call, seqid_));
        create_database_args args = new create_database_args();
        args.Database = database;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_create_database()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_database_result result = new create_database_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        return;
      }

      public Database get_database(string name)
      {
        send_get_database(name);
        return recv_get_database();
      }

      public void send_get_database(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_database", TMessageType.Call, seqid_));
        get_database_args args = new get_database_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Database recv_get_database()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_database_result result = new get_database_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_database failed: unknown result");
      }

      public void drop_database(string name, bool deleteData)
      {
        send_drop_database(name, deleteData);
        recv_drop_database();
      }

      public void send_drop_database(string name, bool deleteData)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_database", TMessageType.Call, seqid_));
        drop_database_args args = new drop_database_args();
        args.Name = name;
        args.DeleteData = deleteData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_drop_database()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_database_result result = new drop_database_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        return;
      }

      public List<string> get_databases(string pattern)
      {
        send_get_databases(pattern);
        return recv_get_databases();
      }

      public void send_get_databases(string pattern)
      {
        oprot_.WriteMessageBegin(new TMessage("get_databases", TMessageType.Call, seqid_));
        get_databases_args args = new get_databases_args();
        args.Pattern = pattern;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_databases()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_databases_result result = new get_databases_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_databases failed: unknown result");
      }

      public List<string> get_all_databases()
      {
        send_get_all_databases();
        return recv_get_all_databases();
      }

      public void send_get_all_databases()
      {
        oprot_.WriteMessageBegin(new TMessage("get_all_databases", TMessageType.Call, seqid_));
        get_all_databases_args args = new get_all_databases_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_all_databases()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_all_databases_result result = new get_all_databases_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_all_databases failed: unknown result");
      }

      public void alter_database(string dbname, Database db)
      {
        send_alter_database(dbname, db);
        recv_alter_database();
      }

      public void send_alter_database(string dbname, Database db)
      {
        oprot_.WriteMessageBegin(new TMessage("alter_database", TMessageType.Call, seqid_));
        alter_database_args args = new alter_database_args();
        args.Dbname = dbname;
        args.Db = db;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_alter_database()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alter_database_result result = new alter_database_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        return;
      }

      public Type get_type(string name)
      {
        send_get_type(name);
        return recv_get_type();
      }

      public void send_get_type(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_type", TMessageType.Call, seqid_));
        get_type_args args = new get_type_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Type recv_get_type()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_type_result result = new get_type_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_type failed: unknown result");
      }

      public bool create_type(Type type)
      {
        send_create_type(type);
        return recv_create_type();
      }

      public void send_create_type(Type type)
      {
        oprot_.WriteMessageBegin(new TMessage("create_type", TMessageType.Call, seqid_));
        create_type_args args = new create_type_args();
        args.Type = type;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_create_type()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_type_result result = new create_type_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "create_type failed: unknown result");
      }

      public bool drop_type(string type)
      {
        send_drop_type(type);
        return recv_drop_type();
      }

      public void send_drop_type(string type)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_type", TMessageType.Call, seqid_));
        drop_type_args args = new drop_type_args();
        args.Type = type;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_drop_type()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_type_result result = new drop_type_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_type failed: unknown result");
      }

      public Dictionary<string, Type> get_type_all(string name)
      {
        send_get_type_all(name);
        return recv_get_type_all();
      }

      public void send_get_type_all(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_type_all", TMessageType.Call, seqid_));
        get_type_all_args args = new get_type_all_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<string, Type> recv_get_type_all()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_type_all_result result = new get_type_all_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_type_all failed: unknown result");
      }

      public List<FieldSchema> get_fields(string db_name, string table_name)
      {
        send_get_fields(db_name, table_name);
        return recv_get_fields();
      }

      public void send_get_fields(string db_name, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_fields", TMessageType.Call, seqid_));
        get_fields_args args = new get_fields_args();
        args.Db_name = db_name;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<FieldSchema> recv_get_fields()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_fields_result result = new get_fields_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_fields failed: unknown result");
      }

      public List<FieldSchema> get_schema(string db_name, string table_name)
      {
        send_get_schema(db_name, table_name);
        return recv_get_schema();
      }

      public void send_get_schema(string db_name, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_schema", TMessageType.Call, seqid_));
        get_schema_args args = new get_schema_args();
        args.Db_name = db_name;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<FieldSchema> recv_get_schema()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_schema_result result = new get_schema_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema failed: unknown result");
      }

      public void create_table(Table tbl)
      {
        send_create_table(tbl);
        recv_create_table();
      }

      public void send_create_table(Table tbl)
      {
        oprot_.WriteMessageBegin(new TMessage("create_table", TMessageType.Call, seqid_));
        create_table_args args = new create_table_args();
        args.Tbl = tbl;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_create_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_table_result result = new create_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        if (result.__isset.o4) {
          throw result.O4;
        }
        return;
      }

      public void drop_table(string dbname, string name, bool deleteData)
      {
        send_drop_table(dbname, name, deleteData);
        recv_drop_table();
      }

      public void send_drop_table(string dbname, string name, bool deleteData)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_table", TMessageType.Call, seqid_));
        drop_table_args args = new drop_table_args();
        args.Dbname = dbname;
        args.Name = name;
        args.DeleteData = deleteData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_drop_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_table_result result = new drop_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        return;
      }

      public List<string> get_tables(string db_name, string pattern)
      {
        send_get_tables(db_name, pattern);
        return recv_get_tables();
      }

      public void send_get_tables(string db_name, string pattern)
      {
        oprot_.WriteMessageBegin(new TMessage("get_tables", TMessageType.Call, seqid_));
        get_tables_args args = new get_tables_args();
        args.Db_name = db_name;
        args.Pattern = pattern;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_tables()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_tables_result result = new get_tables_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tables failed: unknown result");
      }

      public List<string> get_all_tables(string db_name)
      {
        send_get_all_tables(db_name);
        return recv_get_all_tables();
      }

      public void send_get_all_tables(string db_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_all_tables", TMessageType.Call, seqid_));
        get_all_tables_args args = new get_all_tables_args();
        args.Db_name = db_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_all_tables()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_all_tables_result result = new get_all_tables_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_all_tables failed: unknown result");
      }

      public Table get_table(string dbname, string tbl_name)
      {
        send_get_table(dbname, tbl_name);
        return recv_get_table();
      }

      public void send_get_table(string dbname, string tbl_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_table", TMessageType.Call, seqid_));
        get_table_args args = new get_table_args();
        args.Dbname = dbname;
        args.Tbl_name = tbl_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Table recv_get_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_table_result result = new get_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table failed: unknown result");
      }

      public void alter_table(string dbname, string tbl_name, Table new_tbl)
      {
        send_alter_table(dbname, tbl_name, new_tbl);
        recv_alter_table();
      }

      public void send_alter_table(string dbname, string tbl_name, Table new_tbl)
      {
        oprot_.WriteMessageBegin(new TMessage("alter_table", TMessageType.Call, seqid_));
        alter_table_args args = new alter_table_args();
        args.Dbname = dbname;
        args.Tbl_name = tbl_name;
        args.New_tbl = new_tbl;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_alter_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alter_table_result result = new alter_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        return;
      }

      public Partition add_partition(Partition new_part)
      {
        send_add_partition(new_part);
        return recv_add_partition();
      }

      public void send_add_partition(Partition new_part)
      {
        oprot_.WriteMessageBegin(new TMessage("add_partition", TMessageType.Call, seqid_));
        add_partition_args args = new add_partition_args();
        args.New_part = new_part;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Partition recv_add_partition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        add_partition_result result = new add_partition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_partition failed: unknown result");
      }

      public Partition append_partition(string db_name, string tbl_name, List<string> part_vals)
      {
        send_append_partition(db_name, tbl_name, part_vals);
        return recv_append_partition();
      }

      public void send_append_partition(string db_name, string tbl_name, List<string> part_vals)
      {
        oprot_.WriteMessageBegin(new TMessage("append_partition", TMessageType.Call, seqid_));
        append_partition_args args = new append_partition_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_vals = part_vals;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Partition recv_append_partition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        append_partition_result result = new append_partition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append_partition failed: unknown result");
      }

      public Partition append_partition_by_name(string db_name, string tbl_name, string part_name)
      {
        send_append_partition_by_name(db_name, tbl_name, part_name);
        return recv_append_partition_by_name();
      }

      public void send_append_partition_by_name(string db_name, string tbl_name, string part_name)
      {
        oprot_.WriteMessageBegin(new TMessage("append_partition_by_name", TMessageType.Call, seqid_));
        append_partition_by_name_args args = new append_partition_by_name_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_name = part_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Partition recv_append_partition_by_name()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        append_partition_by_name_result result = new append_partition_by_name_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append_partition_by_name failed: unknown result");
      }

      public bool drop_partition(string db_name, string tbl_name, List<string> part_vals, bool deleteData)
      {
        send_drop_partition(db_name, tbl_name, part_vals, deleteData);
        return recv_drop_partition();
      }

      public void send_drop_partition(string db_name, string tbl_name, List<string> part_vals, bool deleteData)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_partition", TMessageType.Call, seqid_));
        drop_partition_args args = new drop_partition_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_vals = part_vals;
        args.DeleteData = deleteData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_drop_partition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_partition_result result = new drop_partition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_partition failed: unknown result");
      }

      public bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)
      {
        send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
        return recv_drop_partition_by_name();
      }

      public void send_drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_partition_by_name", TMessageType.Call, seqid_));
        drop_partition_by_name_args args = new drop_partition_by_name_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_name = part_name;
        args.DeleteData = deleteData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_drop_partition_by_name()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_partition_by_name_result result = new drop_partition_by_name_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_partition_by_name failed: unknown result");
      }

      public Partition get_partition(string db_name, string tbl_name, List<string> part_vals)
      {
        send_get_partition(db_name, tbl_name, part_vals);
        return recv_get_partition();
      }

      public void send_get_partition(string db_name, string tbl_name, List<string> part_vals)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partition", TMessageType.Call, seqid_));
        get_partition_args args = new get_partition_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_vals = part_vals;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Partition recv_get_partition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partition_result result = new get_partition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition failed: unknown result");
      }

      public Partition get_partition_with_auth(string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names)
      {
        send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
        return recv_get_partition_with_auth();
      }

      public void send_get_partition_with_auth(string db_name, string tbl_name, List<string> part_vals, string user_name, List<string> group_names)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partition_with_auth", TMessageType.Call, seqid_));
        get_partition_with_auth_args args = new get_partition_with_auth_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_vals = part_vals;
        args.User_name = user_name;
        args.Group_names = group_names;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Partition recv_get_partition_with_auth()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partition_with_auth_result result = new get_partition_with_auth_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_with_auth failed: unknown result");
      }

      public Partition get_partition_by_name(string db_name, string tbl_name, string part_name)
      {
        send_get_partition_by_name(db_name, tbl_name, part_name);
        return recv_get_partition_by_name();
      }

      public void send_get_partition_by_name(string db_name, string tbl_name, string part_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partition_by_name", TMessageType.Call, seqid_));
        get_partition_by_name_args args = new get_partition_by_name_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_name = part_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Partition recv_get_partition_by_name()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partition_by_name_result result = new get_partition_by_name_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_by_name failed: unknown result");
      }

      public List<Partition> get_partitions(string db_name, string tbl_name, short max_parts)
      {
        send_get_partitions(db_name, tbl_name, max_parts);
        return recv_get_partitions();
      }

      public void send_get_partitions(string db_name, string tbl_name, short max_parts)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partitions", TMessageType.Call, seqid_));
        get_partitions_args args = new get_partitions_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Max_parts = max_parts;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Partition> recv_get_partitions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partitions_result result = new get_partitions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions failed: unknown result");
      }

      public List<Partition> get_partitions_with_auth(string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names)
      {
        send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
        return recv_get_partitions_with_auth();
      }

      public void send_get_partitions_with_auth(string db_name, string tbl_name, short max_parts, string user_name, List<string> group_names)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partitions_with_auth", TMessageType.Call, seqid_));
        get_partitions_with_auth_args args = new get_partitions_with_auth_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Max_parts = max_parts;
        args.User_name = user_name;
        args.Group_names = group_names;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Partition> recv_get_partitions_with_auth()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partitions_with_auth_result result = new get_partitions_with_auth_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_with_auth failed: unknown result");
      }

      public List<string> get_partition_names(string db_name, string tbl_name, short max_parts)
      {
        send_get_partition_names(db_name, tbl_name, max_parts);
        return recv_get_partition_names();
      }

      public void send_get_partition_names(string db_name, string tbl_name, short max_parts)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partition_names", TMessageType.Call, seqid_));
        get_partition_names_args args = new get_partition_names_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Max_parts = max_parts;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_partition_names()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partition_names_result result = new get_partition_names_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_names failed: unknown result");
      }

      public List<Partition> get_partitions_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
      {
        send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
        return recv_get_partitions_ps();
      }

      public void send_get_partitions_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partitions_ps", TMessageType.Call, seqid_));
        get_partitions_ps_args args = new get_partitions_ps_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_vals = part_vals;
        args.Max_parts = max_parts;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Partition> recv_get_partitions_ps()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partitions_ps_result result = new get_partitions_ps_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_ps failed: unknown result");
      }

      public List<Partition> get_partitions_ps_with_auth(string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names)
      {
        send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
        return recv_get_partitions_ps_with_auth();
      }

      public void send_get_partitions_ps_with_auth(string db_name, string tbl_name, List<string> part_vals, short max_parts, string user_name, List<string> group_names)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partitions_ps_with_auth", TMessageType.Call, seqid_));
        get_partitions_ps_with_auth_args args = new get_partitions_ps_with_auth_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_vals = part_vals;
        args.Max_parts = max_parts;
        args.User_name = user_name;
        args.Group_names = group_names;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Partition> recv_get_partitions_ps_with_auth()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partitions_ps_with_auth_result result = new get_partitions_ps_with_auth_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_ps_with_auth failed: unknown result");
      }

      public List<string> get_partition_names_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
      {
        send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
        return recv_get_partition_names_ps();
      }

      public void send_get_partition_names_ps(string db_name, string tbl_name, List<string> part_vals, short max_parts)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partition_names_ps", TMessageType.Call, seqid_));
        get_partition_names_ps_args args = new get_partition_names_ps_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Part_vals = part_vals;
        args.Max_parts = max_parts;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_partition_names_ps()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partition_names_ps_result result = new get_partition_names_ps_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partition_names_ps failed: unknown result");
      }

      public List<Partition> get_partitions_by_filter(string db_name, string tbl_name, string filter, short max_parts)
      {
        send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
        return recv_get_partitions_by_filter();
      }

      public void send_get_partitions_by_filter(string db_name, string tbl_name, string filter, short max_parts)
      {
        oprot_.WriteMessageBegin(new TMessage("get_partitions_by_filter", TMessageType.Call, seqid_));
        get_partitions_by_filter_args args = new get_partitions_by_filter_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Filter = filter;
        args.Max_parts = max_parts;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Partition> recv_get_partitions_by_filter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_partitions_by_filter_result result = new get_partitions_by_filter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_partitions_by_filter failed: unknown result");
      }

      public void alter_partition(string db_name, string tbl_name, Partition new_part)
      {
        send_alter_partition(db_name, tbl_name, new_part);
        recv_alter_partition();
      }

      public void send_alter_partition(string db_name, string tbl_name, Partition new_part)
      {
        oprot_.WriteMessageBegin(new TMessage("alter_partition", TMessageType.Call, seqid_));
        alter_partition_args args = new alter_partition_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.New_part = new_part;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_alter_partition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alter_partition_result result = new alter_partition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        return;
      }

      public string get_config_value(string name, string defaultValue)
      {
        send_get_config_value(name, defaultValue);
        return recv_get_config_value();
      }

      public void send_get_config_value(string name, string defaultValue)
      {
        oprot_.WriteMessageBegin(new TMessage("get_config_value", TMessageType.Call, seqid_));
        get_config_value_args args = new get_config_value_args();
        args.Name = name;
        args.DefaultValue = defaultValue;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_get_config_value()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_config_value_result result = new get_config_value_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_config_value failed: unknown result");
      }

      public List<string> partition_name_to_vals(string part_name)
      {
        send_partition_name_to_vals(part_name);
        return recv_partition_name_to_vals();
      }

      public void send_partition_name_to_vals(string part_name)
      {
        oprot_.WriteMessageBegin(new TMessage("partition_name_to_vals", TMessageType.Call, seqid_));
        partition_name_to_vals_args args = new partition_name_to_vals_args();
        args.Part_name = part_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_partition_name_to_vals()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        partition_name_to_vals_result result = new partition_name_to_vals_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "partition_name_to_vals failed: unknown result");
      }

      public Dictionary<string, string> partition_name_to_spec(string part_name)
      {
        send_partition_name_to_spec(part_name);
        return recv_partition_name_to_spec();
      }

      public void send_partition_name_to_spec(string part_name)
      {
        oprot_.WriteMessageBegin(new TMessage("partition_name_to_spec", TMessageType.Call, seqid_));
        partition_name_to_spec_args args = new partition_name_to_spec_args();
        args.Part_name = part_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<string, string> recv_partition_name_to_spec()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        partition_name_to_spec_result result = new partition_name_to_spec_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "partition_name_to_spec failed: unknown result");
      }

      public Index add_index(Index new_index, Table index_table)
      {
        send_add_index(new_index, index_table);
        return recv_add_index();
      }

      public void send_add_index(Index new_index, Table index_table)
      {
        oprot_.WriteMessageBegin(new TMessage("add_index", TMessageType.Call, seqid_));
        add_index_args args = new add_index_args();
        args.New_index = new_index;
        args.Index_table = index_table;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Index recv_add_index()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        add_index_result result = new add_index_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        if (result.__isset.o3) {
          throw result.O3;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_index failed: unknown result");
      }

      public void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)
      {
        send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
        recv_alter_index();
      }

      public void send_alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)
      {
        oprot_.WriteMessageBegin(new TMessage("alter_index", TMessageType.Call, seqid_));
        alter_index_args args = new alter_index_args();
        args.Dbname = dbname;
        args.Base_tbl_name = base_tbl_name;
        args.Idx_name = idx_name;
        args.New_idx = new_idx;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_alter_index()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alter_index_result result = new alter_index_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        return;
      }

      public bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)
      {
        send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
        return recv_drop_index_by_name();
      }

      public void send_drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_index_by_name", TMessageType.Call, seqid_));
        drop_index_by_name_args args = new drop_index_by_name_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Index_name = index_name;
        args.DeleteData = deleteData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_drop_index_by_name()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_index_by_name_result result = new drop_index_by_name_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_index_by_name failed: unknown result");
      }

      public Index get_index_by_name(string db_name, string tbl_name, string index_name)
      {
        send_get_index_by_name(db_name, tbl_name, index_name);
        return recv_get_index_by_name();
      }

      public void send_get_index_by_name(string db_name, string tbl_name, string index_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_index_by_name", TMessageType.Call, seqid_));
        get_index_by_name_args args = new get_index_by_name_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Index_name = index_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Index recv_get_index_by_name()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_index_by_name_result result = new get_index_by_name_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_index_by_name failed: unknown result");
      }

      public List<Index> get_indexes(string db_name, string tbl_name, short max_indexes)
      {
        send_get_indexes(db_name, tbl_name, max_indexes);
        return recv_get_indexes();
      }

      public void send_get_indexes(string db_name, string tbl_name, short max_indexes)
      {
        oprot_.WriteMessageBegin(new TMessage("get_indexes", TMessageType.Call, seqid_));
        get_indexes_args args = new get_indexes_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Max_indexes = max_indexes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Index> recv_get_indexes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_indexes_result result = new get_indexes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_indexes failed: unknown result");
      }

      public List<string> get_index_names(string db_name, string tbl_name, short max_indexes)
      {
        send_get_index_names(db_name, tbl_name, max_indexes);
        return recv_get_index_names();
      }

      public void send_get_index_names(string db_name, string tbl_name, short max_indexes)
      {
        oprot_.WriteMessageBegin(new TMessage("get_index_names", TMessageType.Call, seqid_));
        get_index_names_args args = new get_index_names_args();
        args.Db_name = db_name;
        args.Tbl_name = tbl_name;
        args.Max_indexes = max_indexes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_index_names()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_index_names_result result = new get_index_names_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o2) {
          throw result.O2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_index_names failed: unknown result");
      }

      public bool create_role(Role role)
      {
        send_create_role(role);
        return recv_create_role();
      }

      public void send_create_role(Role role)
      {
        oprot_.WriteMessageBegin(new TMessage("create_role", TMessageType.Call, seqid_));
        create_role_args args = new create_role_args();
        args.Role = role;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_create_role()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_role_result result = new create_role_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "create_role failed: unknown result");
      }

      public bool drop_role(string role_name)
      {
        send_drop_role(role_name);
        return recv_drop_role();
      }

      public void send_drop_role(string role_name)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_role", TMessageType.Call, seqid_));
        drop_role_args args = new drop_role_args();
        args.Role_name = role_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_drop_role()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_role_result result = new drop_role_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "drop_role failed: unknown result");
      }

      public List<string> get_role_names()
      {
        send_get_role_names();
        return recv_get_role_names();
      }

      public void send_get_role_names()
      {
        oprot_.WriteMessageBegin(new TMessage("get_role_names", TMessageType.Call, seqid_));
        get_role_names_args args = new get_role_names_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_role_names()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_role_names_result result = new get_role_names_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_role_names failed: unknown result");
      }

      public bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)
      {
        send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
        return recv_grant_role();
      }

      public void send_grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)
      {
        oprot_.WriteMessageBegin(new TMessage("grant_role", TMessageType.Call, seqid_));
        grant_role_args args = new grant_role_args();
        args.Role_name = role_name;
        args.Principal_name = principal_name;
        args.Principal_type = principal_type;
        args.Grantor = grantor;
        args.GrantorType = grantorType;
        args.Grant_option = grant_option;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_grant_role()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        grant_role_result result = new grant_role_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grant_role failed: unknown result");
      }

      public bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)
      {
        send_revoke_role(role_name, principal_name, principal_type);
        return recv_revoke_role();
      }

      public void send_revoke_role(string role_name, string principal_name, PrincipalType principal_type)
      {
        oprot_.WriteMessageBegin(new TMessage("revoke_role", TMessageType.Call, seqid_));
        revoke_role_args args = new revoke_role_args();
        args.Role_name = role_name;
        args.Principal_name = principal_name;
        args.Principal_type = principal_type;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_revoke_role()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        revoke_role_result result = new revoke_role_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "revoke_role failed: unknown result");
      }

      public List<Role> list_roles(string principal_name, PrincipalType principal_type)
      {
        send_list_roles(principal_name, principal_type);
        return recv_list_roles();
      }

      public void send_list_roles(string principal_name, PrincipalType principal_type)
      {
        oprot_.WriteMessageBegin(new TMessage("list_roles", TMessageType.Call, seqid_));
        list_roles_args args = new list_roles_args();
        args.Principal_name = principal_name;
        args.Principal_type = principal_type;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Role> recv_list_roles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        list_roles_result result = new list_roles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_roles failed: unknown result");
      }

      public PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name, List<string> group_names)
      {
        send_get_privilege_set(hiveObject, user_name, group_names);
        return recv_get_privilege_set();
      }

      public void send_get_privilege_set(HiveObjectRef hiveObject, string user_name, List<string> group_names)
      {
        oprot_.WriteMessageBegin(new TMessage("get_privilege_set", TMessageType.Call, seqid_));
        get_privilege_set_args args = new get_privilege_set_args();
        args.HiveObject = hiveObject;
        args.User_name = user_name;
        args.Group_names = group_names;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public PrincipalPrivilegeSet recv_get_privilege_set()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_privilege_set_result result = new get_privilege_set_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_privilege_set failed: unknown result");
      }

      public List<HiveObjectPrivilege> list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)
      {
        send_list_privileges(principal_name, principal_type, hiveObject);
        return recv_list_privileges();
      }

      public void send_list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)
      {
        oprot_.WriteMessageBegin(new TMessage("list_privileges", TMessageType.Call, seqid_));
        list_privileges_args args = new list_privileges_args();
        args.Principal_name = principal_name;
        args.Principal_type = principal_type;
        args.HiveObject = hiveObject;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<HiveObjectPrivilege> recv_list_privileges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        list_privileges_result result = new list_privileges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_privileges failed: unknown result");
      }

      public bool grant_privileges(PrivilegeBag privileges)
      {
        send_grant_privileges(privileges);
        return recv_grant_privileges();
      }

      public void send_grant_privileges(PrivilegeBag privileges)
      {
        oprot_.WriteMessageBegin(new TMessage("grant_privileges", TMessageType.Call, seqid_));
        grant_privileges_args args = new grant_privileges_args();
        args.Privileges = privileges;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_grant_privileges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        grant_privileges_result result = new grant_privileges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grant_privileges failed: unknown result");
      }

      public bool revoke_privileges(PrivilegeBag privileges)
      {
        send_revoke_privileges(privileges);
        return recv_revoke_privileges();
      }

      public void send_revoke_privileges(PrivilegeBag privileges)
      {
        oprot_.WriteMessageBegin(new TMessage("revoke_privileges", TMessageType.Call, seqid_));
        revoke_privileges_args args = new revoke_privileges_args();
        args.Privileges = privileges;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_revoke_privileges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        revoke_privileges_result result = new revoke_privileges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "revoke_privileges failed: unknown result");
      }

      public string get_delegation_token(string renewer_kerberos_principal_name)
      {
        send_get_delegation_token(renewer_kerberos_principal_name);
        return recv_get_delegation_token();
      }

      public void send_get_delegation_token(string renewer_kerberos_principal_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_delegation_token", TMessageType.Call, seqid_));
        get_delegation_token_args args = new get_delegation_token_args();
        args.Renewer_kerberos_principal_name = renewer_kerberos_principal_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_get_delegation_token()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_delegation_token_result result = new get_delegation_token_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_delegation_token failed: unknown result");
      }

      public string get_delegation_token_with_signature(string renewer_kerberos_principal_name, string token_signature)
      {
        send_get_delegation_token_with_signature(renewer_kerberos_principal_name, token_signature);
        return recv_get_delegation_token_with_signature();
      }

      public void send_get_delegation_token_with_signature(string renewer_kerberos_principal_name, string token_signature)
      {
        oprot_.WriteMessageBegin(new TMessage("get_delegation_token_with_signature", TMessageType.Call, seqid_));
        get_delegation_token_with_signature_args args = new get_delegation_token_with_signature_args();
        args.Renewer_kerberos_principal_name = renewer_kerberos_principal_name;
        args.Token_signature = token_signature;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_get_delegation_token_with_signature()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_delegation_token_with_signature_result result = new get_delegation_token_with_signature_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_delegation_token_with_signature failed: unknown result");
      }

      public long renew_delegation_token(string token_str_form)
      {
        send_renew_delegation_token(token_str_form);
        return recv_renew_delegation_token();
      }

      public void send_renew_delegation_token(string token_str_form)
      {
        oprot_.WriteMessageBegin(new TMessage("renew_delegation_token", TMessageType.Call, seqid_));
        renew_delegation_token_args args = new renew_delegation_token_args();
        args.Token_str_form = token_str_form;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_renew_delegation_token()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        renew_delegation_token_result result = new renew_delegation_token_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.o1) {
          throw result.O1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "renew_delegation_token failed: unknown result");
      }

      public void cancel_delegation_token(string token_str_form)
      {
        send_cancel_delegation_token(token_str_form);
        recv_cancel_delegation_token();
      }

      public void send_cancel_delegation_token(string token_str_form)
      {
        oprot_.WriteMessageBegin(new TMessage("cancel_delegation_token", TMessageType.Call, seqid_));
        cancel_delegation_token_args args = new cancel_delegation_token_args();
        args.Token_str_form = token_str_form;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_cancel_delegation_token()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_delegation_token_result result = new cancel_delegation_token_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.o1) {
          throw result.O1;
        }
        return;
      }

    }
    public class Processor : Facebook.FB303.FacebookService.Processor, TProcessor {
      public Processor(Iface iface) : base(iface)
      {
        iface_ = iface;
        processMap_["create_database"] = create_database_Process;
        processMap_["get_database"] = get_database_Process;
        processMap_["drop_database"] = drop_database_Process;
        processMap_["get_databases"] = get_databases_Process;
        processMap_["get_all_databases"] = get_all_databases_Process;
        processMap_["alter_database"] = alter_database_Process;
        processMap_["get_type"] = get_type_Process;
        processMap_["create_type"] = create_type_Process;
        processMap_["drop_type"] = drop_type_Process;
        processMap_["get_type_all"] = get_type_all_Process;
        processMap_["get_fields"] = get_fields_Process;
        processMap_["get_schema"] = get_schema_Process;
        processMap_["create_table"] = create_table_Process;
        processMap_["drop_table"] = drop_table_Process;
        processMap_["get_tables"] = get_tables_Process;
        processMap_["get_all_tables"] = get_all_tables_Process;
        processMap_["get_table"] = get_table_Process;
        processMap_["alter_table"] = alter_table_Process;
        processMap_["add_partition"] = add_partition_Process;
        processMap_["append_partition"] = append_partition_Process;
        processMap_["append_partition_by_name"] = append_partition_by_name_Process;
        processMap_["drop_partition"] = drop_partition_Process;
        processMap_["drop_partition_by_name"] = drop_partition_by_name_Process;
        processMap_["get_partition"] = get_partition_Process;
        processMap_["get_partition_with_auth"] = get_partition_with_auth_Process;
        processMap_["get_partition_by_name"] = get_partition_by_name_Process;
        processMap_["get_partitions"] = get_partitions_Process;
        processMap_["get_partitions_with_auth"] = get_partitions_with_auth_Process;
        processMap_["get_partition_names"] = get_partition_names_Process;
        processMap_["get_partitions_ps"] = get_partitions_ps_Process;
        processMap_["get_partitions_ps_with_auth"] = get_partitions_ps_with_auth_Process;
        processMap_["get_partition_names_ps"] = get_partition_names_ps_Process;
        processMap_["get_partitions_by_filter"] = get_partitions_by_filter_Process;
        processMap_["alter_partition"] = alter_partition_Process;
        processMap_["get_config_value"] = get_config_value_Process;
        processMap_["partition_name_to_vals"] = partition_name_to_vals_Process;
        processMap_["partition_name_to_spec"] = partition_name_to_spec_Process;
        processMap_["add_index"] = add_index_Process;
        processMap_["alter_index"] = alter_index_Process;
        processMap_["drop_index_by_name"] = drop_index_by_name_Process;
        processMap_["get_index_by_name"] = get_index_by_name_Process;
        processMap_["get_indexes"] = get_indexes_Process;
        processMap_["get_index_names"] = get_index_names_Process;
        processMap_["create_role"] = create_role_Process;
        processMap_["drop_role"] = drop_role_Process;
        processMap_["get_role_names"] = get_role_names_Process;
        processMap_["grant_role"] = grant_role_Process;
        processMap_["revoke_role"] = revoke_role_Process;
        processMap_["list_roles"] = list_roles_Process;
        processMap_["get_privilege_set"] = get_privilege_set_Process;
        processMap_["list_privileges"] = list_privileges_Process;
        processMap_["grant_privileges"] = grant_privileges_Process;
        processMap_["revoke_privileges"] = revoke_privileges_Process;
        processMap_["get_delegation_token"] = get_delegation_token_Process;
        processMap_["get_delegation_token_with_signature"] = get_delegation_token_with_signature_Process;
        processMap_["renew_delegation_token"] = renew_delegation_token_Process;
        processMap_["cancel_delegation_token"] = cancel_delegation_token_Process;
      }

      private Iface iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void create_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_database_args args = new create_database_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_database_result result = new create_database_result();
        try {
          iface_.create_database(args.Database);
        } catch (AlreadyExistsException o1) {
          result.O1 = o1;
        } catch (InvalidObjectException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("create_database", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_database_args args = new get_database_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_database_result result = new get_database_result();
        try {
          result.Success = iface_.get_database(args.Name);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_database", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_database_args args = new drop_database_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_database_result result = new drop_database_result();
        try {
          iface_.drop_database(args.Name, args.DeleteData);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (InvalidOperationException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("drop_database", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_databases_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_databases_args args = new get_databases_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_databases_result result = new get_databases_result();
        try {
          result.Success = iface_.get_databases(args.Pattern);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_databases", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_all_databases_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_all_databases_args args = new get_all_databases_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_all_databases_result result = new get_all_databases_result();
        try {
          result.Success = iface_.get_all_databases();
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_all_databases", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alter_database_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alter_database_args args = new alter_database_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alter_database_result result = new alter_database_result();
        try {
          iface_.alter_database(args.Dbname, args.Db);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("alter_database", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_type_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_type_args args = new get_type_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_type_result result = new get_type_result();
        try {
          result.Success = iface_.get_type(args.Name);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_type", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_type_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_type_args args = new create_type_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_type_result result = new create_type_result();
        try {
          result.Success = iface_.create_type(args.Type);
        } catch (AlreadyExistsException o1) {
          result.O1 = o1;
        } catch (InvalidObjectException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("create_type", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_type_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_type_args args = new drop_type_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_type_result result = new drop_type_result();
        try {
          result.Success = iface_.drop_type(args.Type);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("drop_type", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_type_all_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_type_all_args args = new get_type_all_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_type_all_result result = new get_type_all_result();
        try {
          result.Success = iface_.get_type_all(args.Name);
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_type_all", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_fields_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_fields_args args = new get_fields_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_fields_result result = new get_fields_result();
        try {
          result.Success = iface_.get_fields(args.Db_name, args.Table_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (UnknownTableException o2) {
          result.O2 = o2;
        } catch (UnknownDBException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("get_fields", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_schema_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_schema_args args = new get_schema_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_schema_result result = new get_schema_result();
        try {
          result.Success = iface_.get_schema(args.Db_name, args.Table_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (UnknownTableException o2) {
          result.O2 = o2;
        } catch (UnknownDBException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("get_schema", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_table_args args = new create_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_table_result result = new create_table_result();
        try {
          iface_.create_table(args.Tbl);
        } catch (AlreadyExistsException o1) {
          result.O1 = o1;
        } catch (InvalidObjectException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        } catch (NoSuchObjectException o4) {
          result.O4 = o4;
        }
        oprot.WriteMessageBegin(new TMessage("create_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_table_args args = new drop_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_table_result result = new drop_table_result();
        try {
          iface_.drop_table(args.Dbname, args.Name, args.DeleteData);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("drop_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_tables_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_tables_args args = new get_tables_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_tables_result result = new get_tables_result();
        try {
          result.Success = iface_.get_tables(args.Db_name, args.Pattern);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_tables", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_all_tables_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_all_tables_args args = new get_all_tables_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_all_tables_result result = new get_all_tables_result();
        try {
          result.Success = iface_.get_all_tables(args.Db_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_all_tables", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_table_args args = new get_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_table_result result = new get_table_result();
        try {
          result.Success = iface_.get_table(args.Dbname, args.Tbl_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alter_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alter_table_args args = new alter_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alter_table_result result = new alter_table_result();
        try {
          iface_.alter_table(args.Dbname, args.Tbl_name, args.New_tbl);
        } catch (InvalidOperationException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("alter_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void add_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        add_partition_args args = new add_partition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        add_partition_result result = new add_partition_result();
        try {
          result.Success = iface_.add_partition(args.New_part);
        } catch (InvalidObjectException o1) {
          result.O1 = o1;
        } catch (AlreadyExistsException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("add_partition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void append_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        append_partition_args args = new append_partition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        append_partition_result result = new append_partition_result();
        try {
          result.Success = iface_.append_partition(args.Db_name, args.Tbl_name, args.Part_vals);
        } catch (InvalidObjectException o1) {
          result.O1 = o1;
        } catch (AlreadyExistsException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("append_partition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void append_partition_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        append_partition_by_name_args args = new append_partition_by_name_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        append_partition_by_name_result result = new append_partition_by_name_result();
        try {
          result.Success = iface_.append_partition_by_name(args.Db_name, args.Tbl_name, args.Part_name);
        } catch (InvalidObjectException o1) {
          result.O1 = o1;
        } catch (AlreadyExistsException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("append_partition_by_name", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_partition_args args = new drop_partition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_partition_result result = new drop_partition_result();
        try {
          result.Success = iface_.drop_partition(args.Db_name, args.Tbl_name, args.Part_vals, args.DeleteData);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("drop_partition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_partition_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_partition_by_name_args args = new drop_partition_by_name_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_partition_by_name_result result = new drop_partition_by_name_result();
        try {
          result.Success = iface_.drop_partition_by_name(args.Db_name, args.Tbl_name, args.Part_name, args.DeleteData);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("drop_partition_by_name", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partition_args args = new get_partition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partition_result result = new get_partition_result();
        try {
          result.Success = iface_.get_partition(args.Db_name, args.Tbl_name, args.Part_vals);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partition_with_auth_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partition_with_auth_args args = new get_partition_with_auth_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partition_with_auth_result result = new get_partition_with_auth_result();
        try {
          result.Success = iface_.get_partition_with_auth(args.Db_name, args.Tbl_name, args.Part_vals, args.User_name, args.Group_names);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partition_with_auth", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partition_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partition_by_name_args args = new get_partition_by_name_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partition_by_name_result result = new get_partition_by_name_result();
        try {
          result.Success = iface_.get_partition_by_name(args.Db_name, args.Tbl_name, args.Part_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partition_by_name", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partitions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partitions_args args = new get_partitions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partitions_result result = new get_partitions_result();
        try {
          result.Success = iface_.get_partitions(args.Db_name, args.Tbl_name, args.Max_parts);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partitions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partitions_with_auth_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partitions_with_auth_args args = new get_partitions_with_auth_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partitions_with_auth_result result = new get_partitions_with_auth_result();
        try {
          result.Success = iface_.get_partitions_with_auth(args.Db_name, args.Tbl_name, args.Max_parts, args.User_name, args.Group_names);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partitions_with_auth", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partition_names_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partition_names_args args = new get_partition_names_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partition_names_result result = new get_partition_names_result();
        try {
          result.Success = iface_.get_partition_names(args.Db_name, args.Tbl_name, args.Max_parts);
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partition_names", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partitions_ps_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partitions_ps_args args = new get_partitions_ps_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partitions_ps_result result = new get_partitions_ps_result();
        try {
          result.Success = iface_.get_partitions_ps(args.Db_name, args.Tbl_name, args.Part_vals, args.Max_parts);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_partitions_ps", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partitions_ps_with_auth_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partitions_ps_with_auth_args args = new get_partitions_ps_with_auth_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partitions_ps_with_auth_result result = new get_partitions_ps_with_auth_result();
        try {
          result.Success = iface_.get_partitions_ps_with_auth(args.Db_name, args.Tbl_name, args.Part_vals, args.Max_parts, args.User_name, args.Group_names);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partitions_ps_with_auth", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partition_names_ps_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partition_names_ps_args args = new get_partition_names_ps_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partition_names_ps_result result = new get_partition_names_ps_result();
        try {
          result.Success = iface_.get_partition_names_ps(args.Db_name, args.Tbl_name, args.Part_vals, args.Max_parts);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_partition_names_ps", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_partitions_by_filter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_partitions_by_filter_args args = new get_partitions_by_filter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_partitions_by_filter_result result = new get_partitions_by_filter_result();
        try {
          result.Success = iface_.get_partitions_by_filter(args.Db_name, args.Tbl_name, args.Filter, args.Max_parts);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_partitions_by_filter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alter_partition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alter_partition_args args = new alter_partition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alter_partition_result result = new alter_partition_result();
        try {
          iface_.alter_partition(args.Db_name, args.Tbl_name, args.New_part);
        } catch (InvalidOperationException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("alter_partition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_config_value_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_config_value_args args = new get_config_value_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_config_value_result result = new get_config_value_result();
        try {
          result.Success = iface_.get_config_value(args.Name, args.DefaultValue);
        } catch (ConfigValSecurityException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_config_value", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void partition_name_to_vals_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        partition_name_to_vals_args args = new partition_name_to_vals_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        partition_name_to_vals_result result = new partition_name_to_vals_result();
        try {
          result.Success = iface_.partition_name_to_vals(args.Part_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("partition_name_to_vals", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void partition_name_to_spec_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        partition_name_to_spec_args args = new partition_name_to_spec_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        partition_name_to_spec_result result = new partition_name_to_spec_result();
        try {
          result.Success = iface_.partition_name_to_spec(args.Part_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("partition_name_to_spec", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void add_index_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        add_index_args args = new add_index_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        add_index_result result = new add_index_result();
        try {
          result.Success = iface_.add_index(args.New_index, args.Index_table);
        } catch (InvalidObjectException o1) {
          result.O1 = o1;
        } catch (AlreadyExistsException o2) {
          result.O2 = o2;
        } catch (MetaException o3) {
          result.O3 = o3;
        }
        oprot.WriteMessageBegin(new TMessage("add_index", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alter_index_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alter_index_args args = new alter_index_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alter_index_result result = new alter_index_result();
        try {
          iface_.alter_index(args.Dbname, args.Base_tbl_name, args.Idx_name, args.New_idx);
        } catch (InvalidOperationException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("alter_index", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_index_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_index_by_name_args args = new drop_index_by_name_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_index_by_name_result result = new drop_index_by_name_result();
        try {
          result.Success = iface_.drop_index_by_name(args.Db_name, args.Tbl_name, args.Index_name, args.DeleteData);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("drop_index_by_name", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_index_by_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_index_by_name_args args = new get_index_by_name_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_index_by_name_result result = new get_index_by_name_result();
        try {
          result.Success = iface_.get_index_by_name(args.Db_name, args.Tbl_name, args.Index_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        } catch (NoSuchObjectException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_index_by_name", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_indexes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_indexes_args args = new get_indexes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_indexes_result result = new get_indexes_result();
        try {
          result.Success = iface_.get_indexes(args.Db_name, args.Tbl_name, args.Max_indexes);
        } catch (NoSuchObjectException o1) {
          result.O1 = o1;
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_indexes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_index_names_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_index_names_args args = new get_index_names_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_index_names_result result = new get_index_names_result();
        try {
          result.Success = iface_.get_index_names(args.Db_name, args.Tbl_name, args.Max_indexes);
        } catch (MetaException o2) {
          result.O2 = o2;
        }
        oprot.WriteMessageBegin(new TMessage("get_index_names", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_role_args args = new create_role_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_role_result result = new create_role_result();
        try {
          result.Success = iface_.create_role(args.Role);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("create_role", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_role_args args = new drop_role_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_role_result result = new drop_role_result();
        try {
          result.Success = iface_.drop_role(args.Role_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("drop_role", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_role_names_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_role_names_args args = new get_role_names_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_role_names_result result = new get_role_names_result();
        try {
          result.Success = iface_.get_role_names();
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_role_names", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void grant_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        grant_role_args args = new grant_role_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        grant_role_result result = new grant_role_result();
        try {
          result.Success = iface_.grant_role(args.Role_name, args.Principal_name, args.Principal_type, args.Grantor, args.GrantorType, args.Grant_option);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("grant_role", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void revoke_role_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        revoke_role_args args = new revoke_role_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        revoke_role_result result = new revoke_role_result();
        try {
          result.Success = iface_.revoke_role(args.Role_name, args.Principal_name, args.Principal_type);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("revoke_role", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void list_roles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        list_roles_args args = new list_roles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        list_roles_result result = new list_roles_result();
        try {
          result.Success = iface_.list_roles(args.Principal_name, args.Principal_type);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("list_roles", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_privilege_set_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_privilege_set_args args = new get_privilege_set_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_privilege_set_result result = new get_privilege_set_result();
        try {
          result.Success = iface_.get_privilege_set(args.HiveObject, args.User_name, args.Group_names);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_privilege_set", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void list_privileges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        list_privileges_args args = new list_privileges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        list_privileges_result result = new list_privileges_result();
        try {
          result.Success = iface_.list_privileges(args.Principal_name, args.Principal_type, args.HiveObject);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("list_privileges", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void grant_privileges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        grant_privileges_args args = new grant_privileges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        grant_privileges_result result = new grant_privileges_result();
        try {
          result.Success = iface_.grant_privileges(args.Privileges);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("grant_privileges", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void revoke_privileges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        revoke_privileges_args args = new revoke_privileges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        revoke_privileges_result result = new revoke_privileges_result();
        try {
          result.Success = iface_.revoke_privileges(args.Privileges);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("revoke_privileges", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_delegation_token_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_delegation_token_args args = new get_delegation_token_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_delegation_token_result result = new get_delegation_token_result();
        try {
          result.Success = iface_.get_delegation_token(args.Renewer_kerberos_principal_name);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_delegation_token", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_delegation_token_with_signature_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_delegation_token_with_signature_args args = new get_delegation_token_with_signature_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_delegation_token_with_signature_result result = new get_delegation_token_with_signature_result();
        try {
          result.Success = iface_.get_delegation_token_with_signature(args.Renewer_kerberos_principal_name, args.Token_signature);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("get_delegation_token_with_signature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void renew_delegation_token_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        renew_delegation_token_args args = new renew_delegation_token_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        renew_delegation_token_result result = new renew_delegation_token_result();
        try {
          result.Success = iface_.renew_delegation_token(args.Token_str_form);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("renew_delegation_token", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_delegation_token_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_delegation_token_args args = new cancel_delegation_token_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_delegation_token_result result = new cancel_delegation_token_result();
        try {
          iface_.cancel_delegation_token(args.Token_str_form);
        } catch (MetaException o1) {
          result.O1 = o1;
        }
        oprot.WriteMessageBegin(new TMessage("cancel_delegation_token", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class create_database_args : TBase
    {
      private Database _database;

      public Database Database
      {
        get
        {
          return _database;
        }
        set
        {
          __isset.database = true;
          this._database = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool database;
      }

      public create_database_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Database = new Database();
                Database.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_database_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Database != null && __isset.database) {
          field.Name = "database";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Database.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_database_args(");
        sb.Append("Database: ");
        sb.Append(Database== null ? "<null>" : Database.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_database_result : TBase
    {
      private AlreadyExistsException _o1;
      private InvalidObjectException _o2;
      private MetaException _o3;

      public AlreadyExistsException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public InvalidObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public create_database_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new AlreadyExistsException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new InvalidObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_database_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_database_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_database_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool name;
      }

      public get_database_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_database_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_database_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_database_result : TBase
    {
      private Database _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public Database Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_database_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Database();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_database_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_database_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_database_args : TBase
    {
      private string _name;
      private bool _deleteData;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public bool DeleteData
      {
        get
        {
          return _deleteData;
        }
        set
        {
          __isset.deleteData = true;
          this._deleteData = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool name;
        public bool deleteData;
      }

      public drop_database_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                DeleteData = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_database_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.deleteData) {
          field.Name = "deleteData";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DeleteData);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_database_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",DeleteData: ");
        sb.Append(DeleteData);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_database_result : TBase
    {
      private NoSuchObjectException _o1;
      private InvalidOperationException _o2;
      private MetaException _o3;

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public InvalidOperationException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public drop_database_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new InvalidOperationException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_database_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_database_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_databases_args : TBase
    {
      private string _pattern;

      public string Pattern
      {
        get
        {
          return _pattern;
        }
        set
        {
          __isset.pattern = true;
          this._pattern = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool pattern;
      }

      public get_databases_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Pattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_databases_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pattern != null && __isset.pattern) {
          field.Name = "pattern";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Pattern);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_databases_args(");
        sb.Append("Pattern: ");
        sb.Append(Pattern);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_databases_result : TBase
    {
      private List<string> _success;
      private MetaException _o1;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_databases_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list98 = iprot.ReadListBegin();
                  for( int _i99 = 0; _i99 < _list98.Count; ++_i99)
                  {
                    string _elem100 = null;
                    _elem100 = iprot.ReadString();
                    Success.Add(_elem100);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_databases_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter101 in Success)
              {
                oprot.WriteString(_iter101);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_databases_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_all_databases_args : TBase
    {

      public get_all_databases_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_all_databases_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_all_databases_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_all_databases_result : TBase
    {
      private List<string> _success;
      private MetaException _o1;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_all_databases_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list102 = iprot.ReadListBegin();
                  for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                  {
                    string _elem104 = null;
                    _elem104 = iprot.ReadString();
                    Success.Add(_elem104);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_all_databases_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter105 in Success)
              {
                oprot.WriteString(_iter105);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_all_databases_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_database_args : TBase
    {
      private string _dbname;
      private Database _db;

      public string Dbname
      {
        get
        {
          return _dbname;
        }
        set
        {
          __isset.dbname = true;
          this._dbname = value;
        }
      }

      public Database Db
      {
        get
        {
          return _db;
        }
        set
        {
          __isset.db = true;
          this._db = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool dbname;
        public bool db;
      }

      public alter_database_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Dbname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Db = new Database();
                Db.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_database_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Dbname != null && __isset.dbname) {
          field.Name = "dbname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dbname);
          oprot.WriteFieldEnd();
        }
        if (Db != null && __isset.db) {
          field.Name = "db";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Db.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_database_args(");
        sb.Append("Dbname: ");
        sb.Append(Dbname);
        sb.Append(",Db: ");
        sb.Append(Db== null ? "<null>" : Db.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_database_result : TBase
    {
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o2;
      }

      public alter_database_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_database_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_database_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_type_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool name;
      }

      public get_type_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_type_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_type_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_type_result : TBase
    {
      private Type _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public Type Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_type_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Type();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_type_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_type_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_type_args : TBase
    {
      private Type _type;

      public Type Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool type;
      }

      public create_type_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Type = new Type();
                Type.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_type_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Type != null && __isset.type) {
          field.Name = "type";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Type.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_type_args(");
        sb.Append("Type: ");
        sb.Append(Type== null ? "<null>" : Type.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_type_result : TBase
    {
      private bool _success;
      private AlreadyExistsException _o1;
      private InvalidObjectException _o2;
      private MetaException _o3;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AlreadyExistsException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public InvalidObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public create_type_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new AlreadyExistsException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new InvalidObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_type_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_type_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_type_args : TBase
    {
      private string _type;

      public string Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool type;
      }

      public drop_type_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_type_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Type != null && __isset.type) {
          field.Name = "type";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_type_args(");
        sb.Append("Type: ");
        sb.Append(Type);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_type_result : TBase
    {
      private bool _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public drop_type_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_type_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_type_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_type_all_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool name;
      }

      public get_type_all_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_type_all_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_type_all_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_type_all_result : TBase
    {
      private Dictionary<string, Type> _success;
      private MetaException _o2;

      public Dictionary<string, Type> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o2;
      }

      public get_type_all_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Type>();
                  TMap _map106 = iprot.ReadMapBegin();
                  for( int _i107 = 0; _i107 < _map106.Count; ++_i107)
                  {
                    string _key108;
                    Type _val109;
                    _key108 = iprot.ReadString();
                    _val109 = new Type();
                    _val109.Read(iprot);
                    Success[_key108] = _val109;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_type_all_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter110 in Success.Keys)
              {
                oprot.WriteString(_iter110);
                Success[_iter110].Write(oprot);
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_type_all_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_fields_args : TBase
    {
      private string _db_name;
      private string _table_name;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool table_name;
      }

      public get_fields_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_fields_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_fields_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_fields_result : TBase
    {
      private List<FieldSchema> _success;
      private MetaException _o1;
      private UnknownTableException _o2;
      private UnknownDBException _o3;

      public List<FieldSchema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public UnknownTableException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public UnknownDBException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public get_fields_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FieldSchema>();
                  TList _list111 = iprot.ReadListBegin();
                  for( int _i112 = 0; _i112 < _list111.Count; ++_i112)
                  {
                    FieldSchema _elem113 = new FieldSchema();
                    _elem113 = new FieldSchema();
                    _elem113.Read(iprot);
                    Success.Add(_elem113);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new UnknownTableException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new UnknownDBException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_fields_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FieldSchema _iter114 in Success)
              {
                _iter114.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_fields_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_args : TBase
    {
      private string _db_name;
      private string _table_name;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool table_name;
      }

      public get_schema_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_result : TBase
    {
      private List<FieldSchema> _success;
      private MetaException _o1;
      private UnknownTableException _o2;
      private UnknownDBException _o3;

      public List<FieldSchema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public UnknownTableException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public UnknownDBException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public get_schema_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FieldSchema>();
                  TList _list115 = iprot.ReadListBegin();
                  for( int _i116 = 0; _i116 < _list115.Count; ++_i116)
                  {
                    FieldSchema _elem117 = new FieldSchema();
                    _elem117 = new FieldSchema();
                    _elem117.Read(iprot);
                    Success.Add(_elem117);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new UnknownTableException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new UnknownDBException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FieldSchema _iter118 in Success)
              {
                _iter118.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_table_args : TBase
    {
      private Table _tbl;

      public Table Tbl
      {
        get
        {
          return _tbl;
        }
        set
        {
          __isset.tbl = true;
          this._tbl = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool tbl;
      }

      public create_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tbl = new Table();
                Tbl.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tbl != null && __isset.tbl) {
          field.Name = "tbl";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tbl.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_table_args(");
        sb.Append("Tbl: ");
        sb.Append(Tbl== null ? "<null>" : Tbl.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_table_result : TBase
    {
      private AlreadyExistsException _o1;
      private InvalidObjectException _o2;
      private MetaException _o3;
      private NoSuchObjectException _o4;

      public AlreadyExistsException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public InvalidObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }

      public NoSuchObjectException O4
      {
        get
        {
          return _o4;
        }
        set
        {
          __isset.o4 = true;
          this._o4 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o2;
        public bool o3;
        public bool o4;
      }

      public create_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new AlreadyExistsException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new InvalidObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                O4 = new NoSuchObjectException();
                O4.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o4) {
          if (O4 != null) {
            field.Name = "O4";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            O4.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_table_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(",O4: ");
        sb.Append(O4== null ? "<null>" : O4.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_table_args : TBase
    {
      private string _dbname;
      private string _name;
      private bool _deleteData;

      public string Dbname
      {
        get
        {
          return _dbname;
        }
        set
        {
          __isset.dbname = true;
          this._dbname = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public bool DeleteData
      {
        get
        {
          return _deleteData;
        }
        set
        {
          __isset.deleteData = true;
          this._deleteData = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool dbname;
        public bool name;
        public bool deleteData;
      }

      public drop_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Dbname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                DeleteData = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Dbname != null && __isset.dbname) {
          field.Name = "dbname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dbname);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.deleteData) {
          field.Name = "deleteData";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DeleteData);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_table_args(");
        sb.Append("Dbname: ");
        sb.Append(Dbname);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",DeleteData: ");
        sb.Append(DeleteData);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_table_result : TBase
    {
      private NoSuchObjectException _o1;
      private MetaException _o3;

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o3;
      }

      public drop_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_table_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_tables_args : TBase
    {
      private string _db_name;
      private string _pattern;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Pattern
      {
        get
        {
          return _pattern;
        }
        set
        {
          __isset.pattern = true;
          this._pattern = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool pattern;
      }

      public get_tables_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Pattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_tables_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Pattern != null && __isset.pattern) {
          field.Name = "pattern";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Pattern);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_tables_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Pattern: ");
        sb.Append(Pattern);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_tables_result : TBase
    {
      private List<string> _success;
      private MetaException _o1;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_tables_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list119 = iprot.ReadListBegin();
                  for( int _i120 = 0; _i120 < _list119.Count; ++_i120)
                  {
                    string _elem121 = null;
                    _elem121 = iprot.ReadString();
                    Success.Add(_elem121);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_tables_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter122 in Success)
              {
                oprot.WriteString(_iter122);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_tables_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_all_tables_args : TBase
    {
      private string _db_name;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
      }

      public get_all_tables_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_all_tables_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_all_tables_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_all_tables_result : TBase
    {
      private List<string> _success;
      private MetaException _o1;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_all_tables_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list123 = iprot.ReadListBegin();
                  for( int _i124 = 0; _i124 < _list123.Count; ++_i124)
                  {
                    string _elem125 = null;
                    _elem125 = iprot.ReadString();
                    Success.Add(_elem125);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_all_tables_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter126 in Success)
              {
                oprot.WriteString(_iter126);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_all_tables_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_table_args : TBase
    {
      private string _dbname;
      private string _tbl_name;

      public string Dbname
      {
        get
        {
          return _dbname;
        }
        set
        {
          __isset.dbname = true;
          this._dbname = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool dbname;
        public bool tbl_name;
      }

      public get_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Dbname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Dbname != null && __isset.dbname) {
          field.Name = "dbname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dbname);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_table_args(");
        sb.Append("Dbname: ");
        sb.Append(Dbname);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_table_result : TBase
    {
      private Table _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public Table Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Table();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_table_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_table_args : TBase
    {
      private string _dbname;
      private string _tbl_name;
      private Table _new_tbl;

      public string Dbname
      {
        get
        {
          return _dbname;
        }
        set
        {
          __isset.dbname = true;
          this._dbname = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public Table New_tbl
      {
        get
        {
          return _new_tbl;
        }
        set
        {
          __isset.new_tbl = true;
          this._new_tbl = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool dbname;
        public bool tbl_name;
        public bool new_tbl;
      }

      public alter_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Dbname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                New_tbl = new Table();
                New_tbl.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Dbname != null && __isset.dbname) {
          field.Name = "dbname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dbname);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (New_tbl != null && __isset.new_tbl) {
          field.Name = "new_tbl";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          New_tbl.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_table_args(");
        sb.Append("Dbname: ");
        sb.Append(Dbname);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",New_tbl: ");
        sb.Append(New_tbl== null ? "<null>" : New_tbl.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_table_result : TBase
    {
      private InvalidOperationException _o1;
      private MetaException _o2;

      public InvalidOperationException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o2;
      }

      public alter_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new InvalidOperationException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_table_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_partition_args : TBase
    {
      private Partition _new_part;

      public Partition New_part
      {
        get
        {
          return _new_part;
        }
        set
        {
          __isset.new_part = true;
          this._new_part = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool new_part;
      }

      public add_partition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                New_part = new Partition();
                New_part.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_partition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (New_part != null && __isset.new_part) {
          field.Name = "new_part";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          New_part.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_partition_args(");
        sb.Append("New_part: ");
        sb.Append(New_part== null ? "<null>" : New_part.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_partition_result : TBase
    {
      private Partition _success;
      private InvalidObjectException _o1;
      private AlreadyExistsException _o2;
      private MetaException _o3;

      public Partition Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public AlreadyExistsException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public add_partition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Partition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new InvalidObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new AlreadyExistsException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_partition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_partition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class append_partition_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private List<string> _part_vals;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public List<string> Part_vals
      {
        get
        {
          return _part_vals;
        }
        set
        {
          __isset.part_vals = true;
          this._part_vals = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_vals;
      }

      public append_partition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Part_vals = new List<string>();
                  TList _list127 = iprot.ReadListBegin();
                  for( int _i128 = 0; _i128 < _list127.Count; ++_i128)
                  {
                    string _elem129 = null;
                    _elem129 = iprot.ReadString();
                    Part_vals.Add(_elem129);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("append_partition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_vals != null && __isset.part_vals) {
          field.Name = "part_vals";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
            foreach (string _iter130 in Part_vals)
            {
              oprot.WriteString(_iter130);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("append_partition_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_vals: ");
        sb.Append(Part_vals);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class append_partition_result : TBase
    {
      private Partition _success;
      private InvalidObjectException _o1;
      private AlreadyExistsException _o2;
      private MetaException _o3;

      public Partition Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public AlreadyExistsException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public append_partition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Partition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new InvalidObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new AlreadyExistsException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("append_partition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("append_partition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class append_partition_by_name_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private string _part_name;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public string Part_name
      {
        get
        {
          return _part_name;
        }
        set
        {
          __isset.part_name = true;
          this._part_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_name;
      }

      public append_partition_by_name_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Part_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("append_partition_by_name_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_name != null && __isset.part_name) {
          field.Name = "part_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("append_partition_by_name_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_name: ");
        sb.Append(Part_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class append_partition_by_name_result : TBase
    {
      private Partition _success;
      private InvalidObjectException _o1;
      private AlreadyExistsException _o2;
      private MetaException _o3;

      public Partition Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public AlreadyExistsException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public append_partition_by_name_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Partition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new InvalidObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new AlreadyExistsException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("append_partition_by_name_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("append_partition_by_name_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_partition_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private List<string> _part_vals;
      private bool _deleteData;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public List<string> Part_vals
      {
        get
        {
          return _part_vals;
        }
        set
        {
          __isset.part_vals = true;
          this._part_vals = value;
        }
      }

      public bool DeleteData
      {
        get
        {
          return _deleteData;
        }
        set
        {
          __isset.deleteData = true;
          this._deleteData = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_vals;
        public bool deleteData;
      }

      public drop_partition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Part_vals = new List<string>();
                  TList _list131 = iprot.ReadListBegin();
                  for( int _i132 = 0; _i132 < _list131.Count; ++_i132)
                  {
                    string _elem133 = null;
                    _elem133 = iprot.ReadString();
                    Part_vals.Add(_elem133);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                DeleteData = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_partition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_vals != null && __isset.part_vals) {
          field.Name = "part_vals";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
            foreach (string _iter134 in Part_vals)
            {
              oprot.WriteString(_iter134);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.deleteData) {
          field.Name = "deleteData";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DeleteData);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_partition_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_vals: ");
        sb.Append(Part_vals);
        sb.Append(",DeleteData: ");
        sb.Append(DeleteData);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_partition_result : TBase
    {
      private bool _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public drop_partition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_partition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_partition_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_partition_by_name_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private string _part_name;
      private bool _deleteData;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public string Part_name
      {
        get
        {
          return _part_name;
        }
        set
        {
          __isset.part_name = true;
          this._part_name = value;
        }
      }

      public bool DeleteData
      {
        get
        {
          return _deleteData;
        }
        set
        {
          __isset.deleteData = true;
          this._deleteData = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_name;
        public bool deleteData;
      }

      public drop_partition_by_name_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Part_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                DeleteData = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_partition_by_name_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_name != null && __isset.part_name) {
          field.Name = "part_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.deleteData) {
          field.Name = "deleteData";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DeleteData);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_partition_by_name_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_name: ");
        sb.Append(Part_name);
        sb.Append(",DeleteData: ");
        sb.Append(DeleteData);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_partition_by_name_result : TBase
    {
      private bool _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public drop_partition_by_name_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_partition_by_name_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_partition_by_name_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private List<string> _part_vals;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public List<string> Part_vals
      {
        get
        {
          return _part_vals;
        }
        set
        {
          __isset.part_vals = true;
          this._part_vals = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_vals;
      }

      public get_partition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Part_vals = new List<string>();
                  TList _list135 = iprot.ReadListBegin();
                  for( int _i136 = 0; _i136 < _list135.Count; ++_i136)
                  {
                    string _elem137 = null;
                    _elem137 = iprot.ReadString();
                    Part_vals.Add(_elem137);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_vals != null && __isset.part_vals) {
          field.Name = "part_vals";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
            foreach (string _iter138 in Part_vals)
            {
              oprot.WriteString(_iter138);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_vals: ");
        sb.Append(Part_vals);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_result : TBase
    {
      private Partition _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public Partition Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_partition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Partition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_with_auth_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private List<string> _part_vals;
      private string _user_name;
      private List<string> _group_names;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public List<string> Part_vals
      {
        get
        {
          return _part_vals;
        }
        set
        {
          __isset.part_vals = true;
          this._part_vals = value;
        }
      }

      public string User_name
      {
        get
        {
          return _user_name;
        }
        set
        {
          __isset.user_name = true;
          this._user_name = value;
        }
      }

      public List<string> Group_names
      {
        get
        {
          return _group_names;
        }
        set
        {
          __isset.group_names = true;
          this._group_names = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_vals;
        public bool user_name;
        public bool group_names;
      }

      public get_partition_with_auth_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Part_vals = new List<string>();
                  TList _list139 = iprot.ReadListBegin();
                  for( int _i140 = 0; _i140 < _list139.Count; ++_i140)
                  {
                    string _elem141 = null;
                    _elem141 = iprot.ReadString();
                    Part_vals.Add(_elem141);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                User_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Group_names = new List<string>();
                  TList _list142 = iprot.ReadListBegin();
                  for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                  {
                    string _elem144 = null;
                    _elem144 = iprot.ReadString();
                    Group_names.Add(_elem144);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_with_auth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_vals != null && __isset.part_vals) {
          field.Name = "part_vals";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
            foreach (string _iter145 in Part_vals)
            {
              oprot.WriteString(_iter145);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (User_name != null && __isset.user_name) {
          field.Name = "user_name";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User_name);
          oprot.WriteFieldEnd();
        }
        if (Group_names != null && __isset.group_names) {
          field.Name = "group_names";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
            foreach (string _iter146 in Group_names)
            {
              oprot.WriteString(_iter146);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_with_auth_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_vals: ");
        sb.Append(Part_vals);
        sb.Append(",User_name: ");
        sb.Append(User_name);
        sb.Append(",Group_names: ");
        sb.Append(Group_names);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_with_auth_result : TBase
    {
      private Partition _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public Partition Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_partition_with_auth_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Partition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_with_auth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_with_auth_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_by_name_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private string _part_name;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public string Part_name
      {
        get
        {
          return _part_name;
        }
        set
        {
          __isset.part_name = true;
          this._part_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_name;
      }

      public get_partition_by_name_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Part_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_by_name_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_name != null && __isset.part_name) {
          field.Name = "part_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_by_name_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_name: ");
        sb.Append(Part_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_by_name_result : TBase
    {
      private Partition _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public Partition Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_partition_by_name_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Partition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_by_name_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_by_name_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private short _max_parts;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public short Max_parts
      {
        get
        {
          return _max_parts;
        }
        set
        {
          __isset.max_parts = true;
          this._max_parts = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool max_parts;
      }

      public get_partitions_args() {
        this._max_parts = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                Max_parts = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.max_parts) {
          field.Name = "max_parts";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_parts);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Max_parts: ");
        sb.Append(Max_parts);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_result : TBase
    {
      private List<Partition> _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public List<Partition> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_partitions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Partition>();
                  TList _list147 = iprot.ReadListBegin();
                  for( int _i148 = 0; _i148 < _list147.Count; ++_i148)
                  {
                    Partition _elem149 = new Partition();
                    _elem149 = new Partition();
                    _elem149.Read(iprot);
                    Success.Add(_elem149);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Partition _iter150 in Success)
              {
                _iter150.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_with_auth_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private short _max_parts;
      private string _user_name;
      private List<string> _group_names;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public short Max_parts
      {
        get
        {
          return _max_parts;
        }
        set
        {
          __isset.max_parts = true;
          this._max_parts = value;
        }
      }

      public string User_name
      {
        get
        {
          return _user_name;
        }
        set
        {
          __isset.user_name = true;
          this._user_name = value;
        }
      }

      public List<string> Group_names
      {
        get
        {
          return _group_names;
        }
        set
        {
          __isset.group_names = true;
          this._group_names = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool max_parts;
        public bool user_name;
        public bool group_names;
      }

      public get_partitions_with_auth_args() {
        this._max_parts = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                Max_parts = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                User_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Group_names = new List<string>();
                  TList _list151 = iprot.ReadListBegin();
                  for( int _i152 = 0; _i152 < _list151.Count; ++_i152)
                  {
                    string _elem153 = null;
                    _elem153 = iprot.ReadString();
                    Group_names.Add(_elem153);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_with_auth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.max_parts) {
          field.Name = "max_parts";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_parts);
          oprot.WriteFieldEnd();
        }
        if (User_name != null && __isset.user_name) {
          field.Name = "user_name";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User_name);
          oprot.WriteFieldEnd();
        }
        if (Group_names != null && __isset.group_names) {
          field.Name = "group_names";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
            foreach (string _iter154 in Group_names)
            {
              oprot.WriteString(_iter154);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_with_auth_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Max_parts: ");
        sb.Append(Max_parts);
        sb.Append(",User_name: ");
        sb.Append(User_name);
        sb.Append(",Group_names: ");
        sb.Append(Group_names);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_with_auth_result : TBase
    {
      private List<Partition> _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public List<Partition> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_partitions_with_auth_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Partition>();
                  TList _list155 = iprot.ReadListBegin();
                  for( int _i156 = 0; _i156 < _list155.Count; ++_i156)
                  {
                    Partition _elem157 = new Partition();
                    _elem157 = new Partition();
                    _elem157.Read(iprot);
                    Success.Add(_elem157);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_with_auth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Partition _iter158 in Success)
              {
                _iter158.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_with_auth_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_names_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private short _max_parts;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public short Max_parts
      {
        get
        {
          return _max_parts;
        }
        set
        {
          __isset.max_parts = true;
          this._max_parts = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool max_parts;
      }

      public get_partition_names_args() {
        this._max_parts = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                Max_parts = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_names_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.max_parts) {
          field.Name = "max_parts";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_parts);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_names_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Max_parts: ");
        sb.Append(Max_parts);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_names_result : TBase
    {
      private List<string> _success;
      private MetaException _o2;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o2;
      }

      public get_partition_names_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list159 = iprot.ReadListBegin();
                  for( int _i160 = 0; _i160 < _list159.Count; ++_i160)
                  {
                    string _elem161 = null;
                    _elem161 = iprot.ReadString();
                    Success.Add(_elem161);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_names_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter162 in Success)
              {
                oprot.WriteString(_iter162);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_names_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_ps_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private List<string> _part_vals;
      private short _max_parts;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public List<string> Part_vals
      {
        get
        {
          return _part_vals;
        }
        set
        {
          __isset.part_vals = true;
          this._part_vals = value;
        }
      }

      public short Max_parts
      {
        get
        {
          return _max_parts;
        }
        set
        {
          __isset.max_parts = true;
          this._max_parts = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_vals;
        public bool max_parts;
      }

      public get_partitions_ps_args() {
        this._max_parts = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Part_vals = new List<string>();
                  TList _list163 = iprot.ReadListBegin();
                  for( int _i164 = 0; _i164 < _list163.Count; ++_i164)
                  {
                    string _elem165 = null;
                    _elem165 = iprot.ReadString();
                    Part_vals.Add(_elem165);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I16) {
                Max_parts = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_ps_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_vals != null && __isset.part_vals) {
          field.Name = "part_vals";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
            foreach (string _iter166 in Part_vals)
            {
              oprot.WriteString(_iter166);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.max_parts) {
          field.Name = "max_parts";
          field.Type = TType.I16;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_parts);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_ps_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_vals: ");
        sb.Append(Part_vals);
        sb.Append(",Max_parts: ");
        sb.Append(Max_parts);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_ps_result : TBase
    {
      private List<Partition> _success;
      private MetaException _o1;

      public List<Partition> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_partitions_ps_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Partition>();
                  TList _list167 = iprot.ReadListBegin();
                  for( int _i168 = 0; _i168 < _list167.Count; ++_i168)
                  {
                    Partition _elem169 = new Partition();
                    _elem169 = new Partition();
                    _elem169.Read(iprot);
                    Success.Add(_elem169);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_ps_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Partition _iter170 in Success)
              {
                _iter170.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_ps_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_ps_with_auth_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private List<string> _part_vals;
      private short _max_parts;
      private string _user_name;
      private List<string> _group_names;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public List<string> Part_vals
      {
        get
        {
          return _part_vals;
        }
        set
        {
          __isset.part_vals = true;
          this._part_vals = value;
        }
      }

      public short Max_parts
      {
        get
        {
          return _max_parts;
        }
        set
        {
          __isset.max_parts = true;
          this._max_parts = value;
        }
      }

      public string User_name
      {
        get
        {
          return _user_name;
        }
        set
        {
          __isset.user_name = true;
          this._user_name = value;
        }
      }

      public List<string> Group_names
      {
        get
        {
          return _group_names;
        }
        set
        {
          __isset.group_names = true;
          this._group_names = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_vals;
        public bool max_parts;
        public bool user_name;
        public bool group_names;
      }

      public get_partitions_ps_with_auth_args() {
        this._max_parts = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Part_vals = new List<string>();
                  TList _list171 = iprot.ReadListBegin();
                  for( int _i172 = 0; _i172 < _list171.Count; ++_i172)
                  {
                    string _elem173 = null;
                    _elem173 = iprot.ReadString();
                    Part_vals.Add(_elem173);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I16) {
                Max_parts = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                User_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Group_names = new List<string>();
                  TList _list174 = iprot.ReadListBegin();
                  for( int _i175 = 0; _i175 < _list174.Count; ++_i175)
                  {
                    string _elem176 = null;
                    _elem176 = iprot.ReadString();
                    Group_names.Add(_elem176);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_ps_with_auth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_vals != null && __isset.part_vals) {
          field.Name = "part_vals";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
            foreach (string _iter177 in Part_vals)
            {
              oprot.WriteString(_iter177);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.max_parts) {
          field.Name = "max_parts";
          field.Type = TType.I16;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_parts);
          oprot.WriteFieldEnd();
        }
        if (User_name != null && __isset.user_name) {
          field.Name = "user_name";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User_name);
          oprot.WriteFieldEnd();
        }
        if (Group_names != null && __isset.group_names) {
          field.Name = "group_names";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
            foreach (string _iter178 in Group_names)
            {
              oprot.WriteString(_iter178);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_ps_with_auth_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_vals: ");
        sb.Append(Part_vals);
        sb.Append(",Max_parts: ");
        sb.Append(Max_parts);
        sb.Append(",User_name: ");
        sb.Append(User_name);
        sb.Append(",Group_names: ");
        sb.Append(Group_names);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_ps_with_auth_result : TBase
    {
      private List<Partition> _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public List<Partition> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_partitions_ps_with_auth_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Partition>();
                  TList _list179 = iprot.ReadListBegin();
                  for( int _i180 = 0; _i180 < _list179.Count; ++_i180)
                  {
                    Partition _elem181 = new Partition();
                    _elem181 = new Partition();
                    _elem181.Read(iprot);
                    Success.Add(_elem181);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_ps_with_auth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Partition _iter182 in Success)
              {
                _iter182.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_ps_with_auth_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_names_ps_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private List<string> _part_vals;
      private short _max_parts;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public List<string> Part_vals
      {
        get
        {
          return _part_vals;
        }
        set
        {
          __isset.part_vals = true;
          this._part_vals = value;
        }
      }

      public short Max_parts
      {
        get
        {
          return _max_parts;
        }
        set
        {
          __isset.max_parts = true;
          this._max_parts = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool part_vals;
        public bool max_parts;
      }

      public get_partition_names_ps_args() {
        this._max_parts = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Part_vals = new List<string>();
                  TList _list183 = iprot.ReadListBegin();
                  for( int _i184 = 0; _i184 < _list183.Count; ++_i184)
                  {
                    string _elem185 = null;
                    _elem185 = iprot.ReadString();
                    Part_vals.Add(_elem185);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I16) {
                Max_parts = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_names_ps_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Part_vals != null && __isset.part_vals) {
          field.Name = "part_vals";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Part_vals.Count));
            foreach (string _iter186 in Part_vals)
            {
              oprot.WriteString(_iter186);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.max_parts) {
          field.Name = "max_parts";
          field.Type = TType.I16;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_parts);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_names_ps_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Part_vals: ");
        sb.Append(Part_vals);
        sb.Append(",Max_parts: ");
        sb.Append(Max_parts);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partition_names_ps_result : TBase
    {
      private List<string> _success;
      private MetaException _o1;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_partition_names_ps_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list187 = iprot.ReadListBegin();
                  for( int _i188 = 0; _i188 < _list187.Count; ++_i188)
                  {
                    string _elem189 = null;
                    _elem189 = iprot.ReadString();
                    Success.Add(_elem189);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partition_names_ps_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter190 in Success)
              {
                oprot.WriteString(_iter190);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partition_names_ps_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_by_filter_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private string _filter;
      private short _max_parts;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public string Filter
      {
        get
        {
          return _filter;
        }
        set
        {
          __isset.filter = true;
          this._filter = value;
        }
      }

      public short Max_parts
      {
        get
        {
          return _max_parts;
        }
        set
        {
          __isset.max_parts = true;
          this._max_parts = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool filter;
        public bool max_parts;
      }

      public get_partitions_by_filter_args() {
        this._max_parts = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Filter = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I16) {
                Max_parts = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_by_filter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Filter != null && __isset.filter) {
          field.Name = "filter";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Filter);
          oprot.WriteFieldEnd();
        }
        if (__isset.max_parts) {
          field.Name = "max_parts";
          field.Type = TType.I16;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_parts);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_by_filter_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Filter: ");
        sb.Append(Filter);
        sb.Append(",Max_parts: ");
        sb.Append(Max_parts);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_partitions_by_filter_result : TBase
    {
      private List<Partition> _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public List<Partition> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_partitions_by_filter_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Partition>();
                  TList _list191 = iprot.ReadListBegin();
                  for( int _i192 = 0; _i192 < _list191.Count; ++_i192)
                  {
                    Partition _elem193 = new Partition();
                    _elem193 = new Partition();
                    _elem193.Read(iprot);
                    Success.Add(_elem193);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_partitions_by_filter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Partition _iter194 in Success)
              {
                _iter194.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_partitions_by_filter_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_partition_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private Partition _new_part;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public Partition New_part
      {
        get
        {
          return _new_part;
        }
        set
        {
          __isset.new_part = true;
          this._new_part = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool new_part;
      }

      public alter_partition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                New_part = new Partition();
                New_part.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_partition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (New_part != null && __isset.new_part) {
          field.Name = "new_part";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          New_part.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_partition_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",New_part: ");
        sb.Append(New_part== null ? "<null>" : New_part.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_partition_result : TBase
    {
      private InvalidOperationException _o1;
      private MetaException _o2;

      public InvalidOperationException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o2;
      }

      public alter_partition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new InvalidOperationException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_partition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_partition_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_config_value_args : TBase
    {
      private string _name;
      private string _defaultValue;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string DefaultValue
      {
        get
        {
          return _defaultValue;
        }
        set
        {
          __isset.defaultValue = true;
          this._defaultValue = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool name;
        public bool defaultValue;
      }

      public get_config_value_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DefaultValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_config_value_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (DefaultValue != null && __isset.defaultValue) {
          field.Name = "defaultValue";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DefaultValue);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_config_value_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",DefaultValue: ");
        sb.Append(DefaultValue);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_config_value_result : TBase
    {
      private string _success;
      private ConfigValSecurityException _o1;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ConfigValSecurityException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_config_value_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new ConfigValSecurityException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_config_value_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_config_value_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class partition_name_to_vals_args : TBase
    {
      private string _part_name;

      public string Part_name
      {
        get
        {
          return _part_name;
        }
        set
        {
          __isset.part_name = true;
          this._part_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool part_name;
      }

      public partition_name_to_vals_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("partition_name_to_vals_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_name != null && __isset.part_name) {
          field.Name = "part_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("partition_name_to_vals_args(");
        sb.Append("Part_name: ");
        sb.Append(Part_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class partition_name_to_vals_result : TBase
    {
      private List<string> _success;
      private MetaException _o1;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public partition_name_to_vals_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list195 = iprot.ReadListBegin();
                  for( int _i196 = 0; _i196 < _list195.Count; ++_i196)
                  {
                    string _elem197 = null;
                    _elem197 = iprot.ReadString();
                    Success.Add(_elem197);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("partition_name_to_vals_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter198 in Success)
              {
                oprot.WriteString(_iter198);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("partition_name_to_vals_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class partition_name_to_spec_args : TBase
    {
      private string _part_name;

      public string Part_name
      {
        get
        {
          return _part_name;
        }
        set
        {
          __isset.part_name = true;
          this._part_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool part_name;
      }

      public partition_name_to_spec_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("partition_name_to_spec_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_name != null && __isset.part_name) {
          field.Name = "part_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("partition_name_to_spec_args(");
        sb.Append("Part_name: ");
        sb.Append(Part_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class partition_name_to_spec_result : TBase
    {
      private Dictionary<string, string> _success;
      private MetaException _o1;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public partition_name_to_spec_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map199 = iprot.ReadMapBegin();
                  for( int _i200 = 0; _i200 < _map199.Count; ++_i200)
                  {
                    string _key201;
                    string _val202;
                    _key201 = iprot.ReadString();
                    _val202 = iprot.ReadString();
                    Success[_key201] = _val202;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("partition_name_to_spec_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter203 in Success.Keys)
              {
                oprot.WriteString(_iter203);
                oprot.WriteString(Success[_iter203]);
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("partition_name_to_spec_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_index_args : TBase
    {
      private Index _new_index;
      private Table _index_table;

      public Index New_index
      {
        get
        {
          return _new_index;
        }
        set
        {
          __isset.new_index = true;
          this._new_index = value;
        }
      }

      public Table Index_table
      {
        get
        {
          return _index_table;
        }
        set
        {
          __isset.index_table = true;
          this._index_table = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool new_index;
        public bool index_table;
      }

      public add_index_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                New_index = new Index();
                New_index.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Index_table = new Table();
                Index_table.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_index_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (New_index != null && __isset.new_index) {
          field.Name = "new_index";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          New_index.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Index_table != null && __isset.index_table) {
          field.Name = "index_table";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Index_table.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_index_args(");
        sb.Append("New_index: ");
        sb.Append(New_index== null ? "<null>" : New_index.ToString());
        sb.Append(",Index_table: ");
        sb.Append(Index_table== null ? "<null>" : Index_table.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_index_result : TBase
    {
      private Index _success;
      private InvalidObjectException _o1;
      private AlreadyExistsException _o2;
      private MetaException _o3;

      public Index Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public AlreadyExistsException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }

      public MetaException O3
      {
        get
        {
          return _o3;
        }
        set
        {
          __isset.o3 = true;
          this._o3 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
        public bool o3;
      }

      public add_index_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Index();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new InvalidObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new AlreadyExistsException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                O3 = new MetaException();
                O3.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_index_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o3) {
          if (O3 != null) {
            field.Name = "O3";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            O3.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_index_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(",O3: ");
        sb.Append(O3== null ? "<null>" : O3.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_index_args : TBase
    {
      private string _dbname;
      private string _base_tbl_name;
      private string _idx_name;
      private Index _new_idx;

      public string Dbname
      {
        get
        {
          return _dbname;
        }
        set
        {
          __isset.dbname = true;
          this._dbname = value;
        }
      }

      public string Base_tbl_name
      {
        get
        {
          return _base_tbl_name;
        }
        set
        {
          __isset.base_tbl_name = true;
          this._base_tbl_name = value;
        }
      }

      public string Idx_name
      {
        get
        {
          return _idx_name;
        }
        set
        {
          __isset.idx_name = true;
          this._idx_name = value;
        }
      }

      public Index New_idx
      {
        get
        {
          return _new_idx;
        }
        set
        {
          __isset.new_idx = true;
          this._new_idx = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool dbname;
        public bool base_tbl_name;
        public bool idx_name;
        public bool new_idx;
      }

      public alter_index_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Dbname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Base_tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Idx_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                New_idx = new Index();
                New_idx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_index_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Dbname != null && __isset.dbname) {
          field.Name = "dbname";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dbname);
          oprot.WriteFieldEnd();
        }
        if (Base_tbl_name != null && __isset.base_tbl_name) {
          field.Name = "base_tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Base_tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Idx_name != null && __isset.idx_name) {
          field.Name = "idx_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Idx_name);
          oprot.WriteFieldEnd();
        }
        if (New_idx != null && __isset.new_idx) {
          field.Name = "new_idx";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          New_idx.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_index_args(");
        sb.Append("Dbname: ");
        sb.Append(Dbname);
        sb.Append(",Base_tbl_name: ");
        sb.Append(Base_tbl_name);
        sb.Append(",Idx_name: ");
        sb.Append(Idx_name);
        sb.Append(",New_idx: ");
        sb.Append(New_idx== null ? "<null>" : New_idx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_index_result : TBase
    {
      private InvalidOperationException _o1;
      private MetaException _o2;

      public InvalidOperationException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
        public bool o2;
      }

      public alter_index_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new InvalidOperationException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_index_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_index_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_index_by_name_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private string _index_name;
      private bool _deleteData;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public string Index_name
      {
        get
        {
          return _index_name;
        }
        set
        {
          __isset.index_name = true;
          this._index_name = value;
        }
      }

      public bool DeleteData
      {
        get
        {
          return _deleteData;
        }
        set
        {
          __isset.deleteData = true;
          this._deleteData = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool index_name;
        public bool deleteData;
      }

      public drop_index_by_name_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Index_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                DeleteData = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_index_by_name_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Index_name != null && __isset.index_name) {
          field.Name = "index_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Index_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.deleteData) {
          field.Name = "deleteData";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DeleteData);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_index_by_name_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Index_name: ");
        sb.Append(Index_name);
        sb.Append(",DeleteData: ");
        sb.Append(DeleteData);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_index_by_name_result : TBase
    {
      private bool _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public drop_index_by_name_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_index_by_name_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_index_by_name_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_index_by_name_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private string _index_name;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public string Index_name
      {
        get
        {
          return _index_name;
        }
        set
        {
          __isset.index_name = true;
          this._index_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool index_name;
      }

      public get_index_by_name_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Index_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_index_by_name_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (Index_name != null && __isset.index_name) {
          field.Name = "index_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Index_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_index_by_name_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Index_name: ");
        sb.Append(Index_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_index_by_name_result : TBase
    {
      private Index _success;
      private MetaException _o1;
      private NoSuchObjectException _o2;

      public Index Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public NoSuchObjectException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_index_by_name_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Index();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new NoSuchObjectException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_index_by_name_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_index_by_name_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_indexes_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private short _max_indexes;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public short Max_indexes
      {
        get
        {
          return _max_indexes;
        }
        set
        {
          __isset.max_indexes = true;
          this._max_indexes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool max_indexes;
      }

      public get_indexes_args() {
        this._max_indexes = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                Max_indexes = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_indexes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.max_indexes) {
          field.Name = "max_indexes";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_indexes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_indexes_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Max_indexes: ");
        sb.Append(Max_indexes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_indexes_result : TBase
    {
      private List<Index> _success;
      private NoSuchObjectException _o1;
      private MetaException _o2;

      public List<Index> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NoSuchObjectException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
        public bool o2;
      }

      public get_indexes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Index>();
                  TList _list204 = iprot.ReadListBegin();
                  for( int _i205 = 0; _i205 < _list204.Count; ++_i205)
                  {
                    Index _elem206 = new Index();
                    _elem206 = new Index();
                    _elem206.Read(iprot);
                    Success.Add(_elem206);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new NoSuchObjectException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_indexes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Index _iter207 in Success)
              {
                _iter207.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_indexes_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_index_names_args : TBase
    {
      private string _db_name;
      private string _tbl_name;
      private short _max_indexes;

      public string Db_name
      {
        get
        {
          return _db_name;
        }
        set
        {
          __isset.db_name = true;
          this._db_name = value;
        }
      }

      public string Tbl_name
      {
        get
        {
          return _tbl_name;
        }
        set
        {
          __isset.tbl_name = true;
          this._tbl_name = value;
        }
      }

      public short Max_indexes
      {
        get
        {
          return _max_indexes;
        }
        set
        {
          __isset.max_indexes = true;
          this._max_indexes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool db_name;
        public bool tbl_name;
        public bool max_indexes;
      }

      public get_index_names_args() {
        this._max_indexes = -1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Db_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tbl_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                Max_indexes = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_index_names_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Db_name != null && __isset.db_name) {
          field.Name = "db_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Db_name);
          oprot.WriteFieldEnd();
        }
        if (Tbl_name != null && __isset.tbl_name) {
          field.Name = "tbl_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tbl_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.max_indexes) {
          field.Name = "max_indexes";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Max_indexes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_index_names_args(");
        sb.Append("Db_name: ");
        sb.Append(Db_name);
        sb.Append(",Tbl_name: ");
        sb.Append(Tbl_name);
        sb.Append(",Max_indexes: ");
        sb.Append(Max_indexes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_index_names_result : TBase
    {
      private List<string> _success;
      private MetaException _o2;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O2
      {
        get
        {
          return _o2;
        }
        set
        {
          __isset.o2 = true;
          this._o2 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o2;
      }

      public get_index_names_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list208 = iprot.ReadListBegin();
                  for( int _i209 = 0; _i209 < _list208.Count; ++_i209)
                  {
                    string _elem210 = null;
                    _elem210 = iprot.ReadString();
                    Success.Add(_elem210);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O2 = new MetaException();
                O2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_index_names_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter211 in Success)
              {
                oprot.WriteString(_iter211);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o2) {
          if (O2 != null) {
            field.Name = "O2";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_index_names_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O2: ");
        sb.Append(O2== null ? "<null>" : O2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_role_args : TBase
    {
      private Role _role;

      public Role Role
      {
        get
        {
          return _role;
        }
        set
        {
          __isset.role = true;
          this._role = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool role;
      }

      public create_role_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Role = new Role();
                Role.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_role_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Role != null && __isset.role) {
          field.Name = "role";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Role.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_role_args(");
        sb.Append("Role: ");
        sb.Append(Role== null ? "<null>" : Role.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_role_result : TBase
    {
      private bool _success;
      private MetaException _o1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public create_role_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_role_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_role_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_role_args : TBase
    {
      private string _role_name;

      public string Role_name
      {
        get
        {
          return _role_name;
        }
        set
        {
          __isset.role_name = true;
          this._role_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool role_name;
      }

      public drop_role_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Role_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_role_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Role_name != null && __isset.role_name) {
          field.Name = "role_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Role_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_role_args(");
        sb.Append("Role_name: ");
        sb.Append(Role_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_role_result : TBase
    {
      private bool _success;
      private MetaException _o1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public drop_role_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_role_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_role_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_role_names_args : TBase
    {

      public get_role_names_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_role_names_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_role_names_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_role_names_result : TBase
    {
      private List<string> _success;
      private MetaException _o1;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_role_names_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list212 = iprot.ReadListBegin();
                  for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                  {
                    string _elem214 = null;
                    _elem214 = iprot.ReadString();
                    Success.Add(_elem214);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_role_names_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter215 in Success)
              {
                oprot.WriteString(_iter215);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_role_names_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class grant_role_args : TBase
    {
      private string _role_name;
      private string _principal_name;
      private PrincipalType _principal_type;
      private string _grantor;
      private PrincipalType _grantorType;
      private bool _grant_option;

      public string Role_name
      {
        get
        {
          return _role_name;
        }
        set
        {
          __isset.role_name = true;
          this._role_name = value;
        }
      }

      public string Principal_name
      {
        get
        {
          return _principal_name;
        }
        set
        {
          __isset.principal_name = true;
          this._principal_name = value;
        }
      }

      public PrincipalType Principal_type
      {
        get
        {
          return _principal_type;
        }
        set
        {
          __isset.principal_type = true;
          this._principal_type = value;
        }
      }

      public string Grantor
      {
        get
        {
          return _grantor;
        }
        set
        {
          __isset.grantor = true;
          this._grantor = value;
        }
      }

      public PrincipalType GrantorType
      {
        get
        {
          return _grantorType;
        }
        set
        {
          __isset.grantorType = true;
          this._grantorType = value;
        }
      }

      public bool Grant_option
      {
        get
        {
          return _grant_option;
        }
        set
        {
          __isset.grant_option = true;
          this._grant_option = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool role_name;
        public bool principal_name;
        public bool principal_type;
        public bool grantor;
        public bool grantorType;
        public bool grant_option;
      }

      public grant_role_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Role_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Principal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Principal_type = (PrincipalType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Grantor = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                GrantorType = (PrincipalType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                Grant_option = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("grant_role_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Role_name != null && __isset.role_name) {
          field.Name = "role_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Role_name);
          oprot.WriteFieldEnd();
        }
        if (Principal_name != null && __isset.principal_name) {
          field.Name = "principal_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Principal_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.principal_type) {
          field.Name = "principal_type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Principal_type);
          oprot.WriteFieldEnd();
        }
        if (Grantor != null && __isset.grantor) {
          field.Name = "grantor";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Grantor);
          oprot.WriteFieldEnd();
        }
        if (__isset.grantorType) {
          field.Name = "grantorType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)GrantorType);
          oprot.WriteFieldEnd();
        }
        if (__isset.grant_option) {
          field.Name = "grant_option";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Grant_option);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("grant_role_args(");
        sb.Append("Role_name: ");
        sb.Append(Role_name);
        sb.Append(",Principal_name: ");
        sb.Append(Principal_name);
        sb.Append(",Principal_type: ");
        sb.Append(Principal_type);
        sb.Append(",Grantor: ");
        sb.Append(Grantor);
        sb.Append(",GrantorType: ");
        sb.Append(GrantorType);
        sb.Append(",Grant_option: ");
        sb.Append(Grant_option);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class grant_role_result : TBase
    {
      private bool _success;
      private MetaException _o1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public grant_role_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("grant_role_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("grant_role_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class revoke_role_args : TBase
    {
      private string _role_name;
      private string _principal_name;
      private PrincipalType _principal_type;

      public string Role_name
      {
        get
        {
          return _role_name;
        }
        set
        {
          __isset.role_name = true;
          this._role_name = value;
        }
      }

      public string Principal_name
      {
        get
        {
          return _principal_name;
        }
        set
        {
          __isset.principal_name = true;
          this._principal_name = value;
        }
      }

      public PrincipalType Principal_type
      {
        get
        {
          return _principal_type;
        }
        set
        {
          __isset.principal_type = true;
          this._principal_type = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool role_name;
        public bool principal_name;
        public bool principal_type;
      }

      public revoke_role_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Role_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Principal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Principal_type = (PrincipalType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("revoke_role_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Role_name != null && __isset.role_name) {
          field.Name = "role_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Role_name);
          oprot.WriteFieldEnd();
        }
        if (Principal_name != null && __isset.principal_name) {
          field.Name = "principal_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Principal_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.principal_type) {
          field.Name = "principal_type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Principal_type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("revoke_role_args(");
        sb.Append("Role_name: ");
        sb.Append(Role_name);
        sb.Append(",Principal_name: ");
        sb.Append(Principal_name);
        sb.Append(",Principal_type: ");
        sb.Append(Principal_type);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class revoke_role_result : TBase
    {
      private bool _success;
      private MetaException _o1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public revoke_role_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("revoke_role_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("revoke_role_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_roles_args : TBase
    {
      private string _principal_name;
      private PrincipalType _principal_type;

      public string Principal_name
      {
        get
        {
          return _principal_name;
        }
        set
        {
          __isset.principal_name = true;
          this._principal_name = value;
        }
      }

      public PrincipalType Principal_type
      {
        get
        {
          return _principal_type;
        }
        set
        {
          __isset.principal_type = true;
          this._principal_type = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool principal_name;
        public bool principal_type;
      }

      public list_roles_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Principal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Principal_type = (PrincipalType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_roles_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Principal_name != null && __isset.principal_name) {
          field.Name = "principal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Principal_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.principal_type) {
          field.Name = "principal_type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Principal_type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_roles_args(");
        sb.Append("Principal_name: ");
        sb.Append(Principal_name);
        sb.Append(",Principal_type: ");
        sb.Append(Principal_type);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_roles_result : TBase
    {
      private List<Role> _success;
      private MetaException _o1;

      public List<Role> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public list_roles_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Role>();
                  TList _list216 = iprot.ReadListBegin();
                  for( int _i217 = 0; _i217 < _list216.Count; ++_i217)
                  {
                    Role _elem218 = new Role();
                    _elem218 = new Role();
                    _elem218.Read(iprot);
                    Success.Add(_elem218);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_roles_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Role _iter219 in Success)
              {
                _iter219.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_roles_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_privilege_set_args : TBase
    {
      private HiveObjectRef _hiveObject;
      private string _user_name;
      private List<string> _group_names;

      public HiveObjectRef HiveObject
      {
        get
        {
          return _hiveObject;
        }
        set
        {
          __isset.hiveObject = true;
          this._hiveObject = value;
        }
      }

      public string User_name
      {
        get
        {
          return _user_name;
        }
        set
        {
          __isset.user_name = true;
          this._user_name = value;
        }
      }

      public List<string> Group_names
      {
        get
        {
          return _group_names;
        }
        set
        {
          __isset.group_names = true;
          this._group_names = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool hiveObject;
        public bool user_name;
        public bool group_names;
      }

      public get_privilege_set_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                HiveObject = new HiveObjectRef();
                HiveObject.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                User_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Group_names = new List<string>();
                  TList _list220 = iprot.ReadListBegin();
                  for( int _i221 = 0; _i221 < _list220.Count; ++_i221)
                  {
                    string _elem222 = null;
                    _elem222 = iprot.ReadString();
                    Group_names.Add(_elem222);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_privilege_set_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (HiveObject != null && __isset.hiveObject) {
          field.Name = "hiveObject";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          HiveObject.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (User_name != null && __isset.user_name) {
          field.Name = "user_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User_name);
          oprot.WriteFieldEnd();
        }
        if (Group_names != null && __isset.group_names) {
          field.Name = "group_names";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Group_names.Count));
            foreach (string _iter223 in Group_names)
            {
              oprot.WriteString(_iter223);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_privilege_set_args(");
        sb.Append("HiveObject: ");
        sb.Append(HiveObject== null ? "<null>" : HiveObject.ToString());
        sb.Append(",User_name: ");
        sb.Append(User_name);
        sb.Append(",Group_names: ");
        sb.Append(Group_names);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_privilege_set_result : TBase
    {
      private PrincipalPrivilegeSet _success;
      private MetaException _o1;

      public PrincipalPrivilegeSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_privilege_set_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PrincipalPrivilegeSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_privilege_set_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_privilege_set_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_privileges_args : TBase
    {
      private string _principal_name;
      private PrincipalType _principal_type;
      private HiveObjectRef _hiveObject;

      public string Principal_name
      {
        get
        {
          return _principal_name;
        }
        set
        {
          __isset.principal_name = true;
          this._principal_name = value;
        }
      }

      public PrincipalType Principal_type
      {
        get
        {
          return _principal_type;
        }
        set
        {
          __isset.principal_type = true;
          this._principal_type = value;
        }
      }

      public HiveObjectRef HiveObject
      {
        get
        {
          return _hiveObject;
        }
        set
        {
          __isset.hiveObject = true;
          this._hiveObject = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool principal_name;
        public bool principal_type;
        public bool hiveObject;
      }

      public list_privileges_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Principal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Principal_type = (PrincipalType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                HiveObject = new HiveObjectRef();
                HiveObject.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_privileges_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Principal_name != null && __isset.principal_name) {
          field.Name = "principal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Principal_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.principal_type) {
          field.Name = "principal_type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Principal_type);
          oprot.WriteFieldEnd();
        }
        if (HiveObject != null && __isset.hiveObject) {
          field.Name = "hiveObject";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          HiveObject.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_privileges_args(");
        sb.Append("Principal_name: ");
        sb.Append(Principal_name);
        sb.Append(",Principal_type: ");
        sb.Append(Principal_type);
        sb.Append(",HiveObject: ");
        sb.Append(HiveObject== null ? "<null>" : HiveObject.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_privileges_result : TBase
    {
      private List<HiveObjectPrivilege> _success;
      private MetaException _o1;

      public List<HiveObjectPrivilege> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public list_privileges_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<HiveObjectPrivilege>();
                  TList _list224 = iprot.ReadListBegin();
                  for( int _i225 = 0; _i225 < _list224.Count; ++_i225)
                  {
                    HiveObjectPrivilege _elem226 = new HiveObjectPrivilege();
                    _elem226 = new HiveObjectPrivilege();
                    _elem226.Read(iprot);
                    Success.Add(_elem226);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_privileges_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (HiveObjectPrivilege _iter227 in Success)
              {
                _iter227.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_privileges_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class grant_privileges_args : TBase
    {
      private PrivilegeBag _privileges;

      public PrivilegeBag Privileges
      {
        get
        {
          return _privileges;
        }
        set
        {
          __isset.privileges = true;
          this._privileges = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool privileges;
      }

      public grant_privileges_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Privileges = new PrivilegeBag();
                Privileges.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("grant_privileges_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Privileges != null && __isset.privileges) {
          field.Name = "privileges";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Privileges.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("grant_privileges_args(");
        sb.Append("Privileges: ");
        sb.Append(Privileges== null ? "<null>" : Privileges.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class grant_privileges_result : TBase
    {
      private bool _success;
      private MetaException _o1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public grant_privileges_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("grant_privileges_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("grant_privileges_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class revoke_privileges_args : TBase
    {
      private PrivilegeBag _privileges;

      public PrivilegeBag Privileges
      {
        get
        {
          return _privileges;
        }
        set
        {
          __isset.privileges = true;
          this._privileges = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool privileges;
      }

      public revoke_privileges_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Privileges = new PrivilegeBag();
                Privileges.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("revoke_privileges_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Privileges != null && __isset.privileges) {
          field.Name = "privileges";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Privileges.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("revoke_privileges_args(");
        sb.Append("Privileges: ");
        sb.Append(Privileges== null ? "<null>" : Privileges.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class revoke_privileges_result : TBase
    {
      private bool _success;
      private MetaException _o1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public revoke_privileges_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("revoke_privileges_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("revoke_privileges_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_delegation_token_args : TBase
    {
      private string _renewer_kerberos_principal_name;

      public string Renewer_kerberos_principal_name
      {
        get
        {
          return _renewer_kerberos_principal_name;
        }
        set
        {
          __isset.renewer_kerberos_principal_name = true;
          this._renewer_kerberos_principal_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool renewer_kerberos_principal_name;
      }

      public get_delegation_token_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Renewer_kerberos_principal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_delegation_token_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Renewer_kerberos_principal_name != null && __isset.renewer_kerberos_principal_name) {
          field.Name = "renewer_kerberos_principal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Renewer_kerberos_principal_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_delegation_token_args(");
        sb.Append("Renewer_kerberos_principal_name: ");
        sb.Append(Renewer_kerberos_principal_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_delegation_token_result : TBase
    {
      private string _success;
      private MetaException _o1;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_delegation_token_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_delegation_token_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_delegation_token_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_delegation_token_with_signature_args : TBase
    {
      private string _renewer_kerberos_principal_name;
      private string _token_signature;

      public string Renewer_kerberos_principal_name
      {
        get
        {
          return _renewer_kerberos_principal_name;
        }
        set
        {
          __isset.renewer_kerberos_principal_name = true;
          this._renewer_kerberos_principal_name = value;
        }
      }

      public string Token_signature
      {
        get
        {
          return _token_signature;
        }
        set
        {
          __isset.token_signature = true;
          this._token_signature = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool renewer_kerberos_principal_name;
        public bool token_signature;
      }

      public get_delegation_token_with_signature_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Renewer_kerberos_principal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Token_signature = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_delegation_token_with_signature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Renewer_kerberos_principal_name != null && __isset.renewer_kerberos_principal_name) {
          field.Name = "renewer_kerberos_principal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Renewer_kerberos_principal_name);
          oprot.WriteFieldEnd();
        }
        if (Token_signature != null && __isset.token_signature) {
          field.Name = "token_signature";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token_signature);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_delegation_token_with_signature_args(");
        sb.Append("Renewer_kerberos_principal_name: ");
        sb.Append(Renewer_kerberos_principal_name);
        sb.Append(",Token_signature: ");
        sb.Append(Token_signature);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_delegation_token_with_signature_result : TBase
    {
      private string _success;
      private MetaException _o1;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public get_delegation_token_with_signature_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_delegation_token_with_signature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_delegation_token_with_signature_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class renew_delegation_token_args : TBase
    {
      private string _token_str_form;

      public string Token_str_form
      {
        get
        {
          return _token_str_form;
        }
        set
        {
          __isset.token_str_form = true;
          this._token_str_form = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool token_str_form;
      }

      public renew_delegation_token_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Token_str_form = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renew_delegation_token_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token_str_form != null && __isset.token_str_form) {
          field.Name = "token_str_form";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token_str_form);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renew_delegation_token_args(");
        sb.Append("Token_str_form: ");
        sb.Append(Token_str_form);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class renew_delegation_token_result : TBase
    {
      private long _success;
      private MetaException _o1;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool o1;
      }

      public renew_delegation_token_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renew_delegation_token_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renew_delegation_token_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_delegation_token_args : TBase
    {
      private string _token_str_form;

      public string Token_str_form
      {
        get
        {
          return _token_str_form;
        }
        set
        {
          __isset.token_str_form = true;
          this._token_str_form = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool token_str_form;
      }

      public cancel_delegation_token_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Token_str_form = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_delegation_token_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token_str_form != null && __isset.token_str_form) {
          field.Name = "token_str_form";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token_str_form);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_delegation_token_args(");
        sb.Append("Token_str_form: ");
        sb.Append(Token_str_form);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_delegation_token_result : TBase
    {
      private MetaException _o1;

      public MetaException O1
      {
        get
        {
          return _o1;
        }
        set
        {
          __isset.o1 = true;
          this._o1 = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool o1;
      }

      public cancel_delegation_token_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                O1 = new MetaException();
                O1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_delegation_token_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.o1) {
          if (O1 != null) {
            field.Name = "O1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            O1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_delegation_token_result(");
        sb.Append("O1: ");
        sb.Append(O1== null ? "<null>" : O1.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
