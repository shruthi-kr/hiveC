/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Hadoop.Hive
{

  [Serializable]
  public partial class StorageDescriptor : TBase
  {
    private List<FieldSchema> _cols;
    private string _location;
    private string _inputFormat;
    private string _outputFormat;
    private bool _compressed;
    private int _numBuckets;
    private SerDeInfo _serdeInfo;
    private List<string> _bucketCols;
    private List<Order> _sortCols;
    private Dictionary<string, string> _parameters;

    public List<FieldSchema> Cols
    {
      get
      {
        return _cols;
      }
      set
      {
        __isset.cols = true;
        this._cols = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public string InputFormat
    {
      get
      {
        return _inputFormat;
      }
      set
      {
        __isset.inputFormat = true;
        this._inputFormat = value;
      }
    }

    public string OutputFormat
    {
      get
      {
        return _outputFormat;
      }
      set
      {
        __isset.outputFormat = true;
        this._outputFormat = value;
      }
    }

    public bool Compressed
    {
      get
      {
        return _compressed;
      }
      set
      {
        __isset.compressed = true;
        this._compressed = value;
      }
    }

    public int NumBuckets
    {
      get
      {
        return _numBuckets;
      }
      set
      {
        __isset.numBuckets = true;
        this._numBuckets = value;
      }
    }

    public SerDeInfo SerdeInfo
    {
      get
      {
        return _serdeInfo;
      }
      set
      {
        __isset.serdeInfo = true;
        this._serdeInfo = value;
      }
    }

    public List<string> BucketCols
    {
      get
      {
        return _bucketCols;
      }
      set
      {
        __isset.bucketCols = true;
        this._bucketCols = value;
      }
    }

    public List<Order> SortCols
    {
      get
      {
        return _sortCols;
      }
      set
      {
        __isset.sortCols = true;
        this._sortCols = value;
      }
    }

    public Dictionary<string, string> Parameters
    {
      get
      {
        return _parameters;
      }
      set
      {
        __isset.parameters = true;
        this._parameters = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool cols;
      public bool location;
      public bool inputFormat;
      public bool outputFormat;
      public bool compressed;
      public bool numBuckets;
      public bool serdeInfo;
      public bool bucketCols;
      public bool sortCols;
      public bool parameters;
    }

    public StorageDescriptor() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Cols = new List<FieldSchema>();
                TList _list49 = iprot.ReadListBegin();
                for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                {
                  FieldSchema _elem51 = new FieldSchema();
                  _elem51 = new FieldSchema();
                  _elem51.Read(iprot);
                  Cols.Add(_elem51);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              InputFormat = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              OutputFormat = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Compressed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              NumBuckets = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              SerdeInfo = new SerDeInfo();
              SerdeInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                BucketCols = new List<string>();
                TList _list52 = iprot.ReadListBegin();
                for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                {
                  string _elem54 = null;
                  _elem54 = iprot.ReadString();
                  BucketCols.Add(_elem54);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                SortCols = new List<Order>();
                TList _list55 = iprot.ReadListBegin();
                for( int _i56 = 0; _i56 < _list55.Count; ++_i56)
                {
                  Order _elem57 = new Order();
                  _elem57 = new Order();
                  _elem57.Read(iprot);
                  SortCols.Add(_elem57);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                Parameters = new Dictionary<string, string>();
                TMap _map58 = iprot.ReadMapBegin();
                for( int _i59 = 0; _i59 < _map58.Count; ++_i59)
                {
                  string _key60;
                  string _val61;
                  _key60 = iprot.ReadString();
                  _val61 = iprot.ReadString();
                  Parameters[_key60] = _val61;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StorageDescriptor");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Cols != null && __isset.cols) {
        field.Name = "cols";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Cols.Count));
          foreach (FieldSchema _iter62 in Cols)
          {
            _iter62.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (InputFormat != null && __isset.inputFormat) {
        field.Name = "inputFormat";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InputFormat);
        oprot.WriteFieldEnd();
      }
      if (OutputFormat != null && __isset.outputFormat) {
        field.Name = "outputFormat";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OutputFormat);
        oprot.WriteFieldEnd();
      }
      if (__isset.compressed) {
        field.Name = "compressed";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Compressed);
        oprot.WriteFieldEnd();
      }
      if (__isset.numBuckets) {
        field.Name = "numBuckets";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumBuckets);
        oprot.WriteFieldEnd();
      }
      if (SerdeInfo != null && __isset.serdeInfo) {
        field.Name = "serdeInfo";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        SerdeInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (BucketCols != null && __isset.bucketCols) {
        field.Name = "bucketCols";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, BucketCols.Count));
          foreach (string _iter63 in BucketCols)
          {
            oprot.WriteString(_iter63);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (SortCols != null && __isset.sortCols) {
        field.Name = "sortCols";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SortCols.Count));
          foreach (Order _iter64 in SortCols)
          {
            _iter64.Write(oprot);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      if (Parameters != null && __isset.parameters) {
        field.Name = "parameters";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
          foreach (string _iter65 in Parameters.Keys)
          {
            oprot.WriteString(_iter65);
            oprot.WriteString(Parameters[_iter65]);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StorageDescriptor(");
      sb.Append("Cols: ");
      sb.Append(Cols);
      sb.Append(",Location: ");
      sb.Append(Location);
      sb.Append(",InputFormat: ");
      sb.Append(InputFormat);
      sb.Append(",OutputFormat: ");
      sb.Append(OutputFormat);
      sb.Append(",Compressed: ");
      sb.Append(Compressed);
      sb.Append(",NumBuckets: ");
      sb.Append(NumBuckets);
      sb.Append(",SerdeInfo: ");
      sb.Append(SerdeInfo== null ? "<null>" : SerdeInfo.ToString());
      sb.Append(",BucketCols: ");
      sb.Append(BucketCols);
      sb.Append(",SortCols: ");
      sb.Append(SortCols);
      sb.Append(",Parameters: ");
      sb.Append(Parameters);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
